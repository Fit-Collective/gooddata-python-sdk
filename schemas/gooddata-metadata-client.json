{
  "components": {
    "parameters": {
      "idPathParameter": {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
          "type": "string"
        }
      },
      "page": {
        "description": "Zero-based page index (0..N)",
        "in": "query",
        "name": "page",
        "schema": {
          "default": 0,
          "type": "integer"
        }
      },
      "size": {
        "description": "The size of the page to be returned",
        "in": "query",
        "name": "size",
        "schema": {
          "default": 20,
          "type": "integer"
        }
      },
      "sort": {
        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
        "in": "query",
        "name": "sort",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "responses": {
      "Deleted": {
        "description": "Successfully deleted"
      }
    },
    "schemas": {
      "ApiEntitlement": {
        "properties": {
          "expiry": {
            "format": "date",
            "type": "string"
          },
          "name": {
            "enum": [
              "Contract",
              "CustomTheming",
              "PdfExports",
              "ManagedOIDC",
              "UiLocalization",
              "Tier",
              "UserCount",
              "UnlimitedUsers",
              "UnlimitedWorkspaces",
              "WhiteLabeling",
              "WorkspaceCount"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "AssigneeIdentifier": {
        "description": "Identifier of a user or user-group.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "user",
              "userGroup"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "AvailableAssignees": {
        "properties": {
          "userGroups": {
            "description": "List of user groups",
            "items": {
              "$ref": "#/components/schemas/UserGroupAssignee"
            },
            "type": "array"
          },
          "users": {
            "description": "List of users",
            "items": {
              "$ref": "#/components/schemas/UserAssignee"
            },
            "type": "array"
          }
        },
        "required": [
          "userGroups",
          "users"
        ],
        "type": "object"
      },
      "DashboardPermissions": {
        "properties": {
          "userGroups": {
            "description": "List of user groups",
            "items": {
              "$ref": "#/components/schemas/UserGroupPermission"
            },
            "type": "array"
          },
          "users": {
            "description": "List of users",
            "items": {
              "$ref": "#/components/schemas/UserPermission"
            },
            "type": "array"
          }
        },
        "required": [
          "userGroups",
          "users"
        ],
        "type": "object"
      },
      "DataSourceTableIdentifier": {
        "description": "An id of the table from PDM mapped to this dataset. Including ID of data source.",
        "example": {
          "dataSourceId": "my-postgres",
          "id": "customers",
          "type": "DATA_SOURCE"
        },
        "properties": {
          "dataSourceId": {
            "description": "Data source ID.",
            "example": "my-postgres",
            "maxLength": 255,
            "type": "string"
          },
          "id": {
            "description": "ID of table.",
            "example": "customers",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Data source entity type.",
            "enum": [
              "dataSource"
            ],
            "example": "dataSource",
            "type": "string"
          }
        },
        "required": [
          "dataSourceId",
          "id",
          "type"
        ],
        "type": "object"
      },
      "DatasetReferenceIdentifier": {
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "dataset"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "DeclarativeAnalyticalDashboard": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "description": {
            "description": "Analytical dashboard description.",
            "example": "Period to period comparison of revenues in main sectors.",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Analytical dashboard ID.",
            "example": "revenues-analysis",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "permissions": {
            "description": "A list of permissions.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardPermission"
            },
            "type": "array"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Revenues"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Revenues\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Analytical dashboard title.",
            "example": "Revenues analysis",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeAnalyticalDashboardExtension": {
        "properties": {
          "id": {
            "description": "Analytical dashboard ID.",
            "example": "revenues-analysis",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "permissions": {
            "description": "A list of permissions.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardPermission"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "permissions"
        ],
        "type": "object"
      },
      "DeclarativeAnalyticalDashboardPermission": {
        "description": "Analytical dashboard permission.",
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "name": {
            "description": "Permission name.",
            "enum": [
              "EDIT",
              "SHARE",
              "VIEW"
            ],
            "type": "string"
          }
        },
        "required": [
          "assignee",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeAnalytics": {
        "description": "Entities describing users' view on data.",
        "properties": {
          "analytics": {
            "$ref": "#/components/schemas/DeclarativeAnalyticsLayer"
          }
        },
        "type": "object"
      },
      "DeclarativeAnalyticsLayer": {
        "properties": {
          "analyticalDashboardExtensions": {
            "description": "A list of dashboard permissions assigned to a related dashboard.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardExtension"
            },
            "type": "array"
          },
          "analyticalDashboards": {
            "description": "A list of analytical dashboards available in the model.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeAnalyticalDashboard"
            },
            "type": "array"
          },
          "dashboardPlugins": {
            "description": "A list of dashboard plugins available in the model.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeDashboardPlugin"
            },
            "type": "array"
          },
          "filterContexts": {
            "description": "A list of filter contexts available in the model.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeFilterContext"
            },
            "type": "array"
          },
          "metrics": {
            "description": "A list of metrics available in the model.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeMetric"
            },
            "type": "array"
          },
          "visualizationObjects": {
            "description": "A list of visualization objects available in the model.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeVisualizationObject"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeclarativeAttribute": {
        "description": "A dataset attribute.",
        "properties": {
          "defaultView": {
            "$ref": "#/components/schemas/LabelIdentifier"
          },
          "description": {
            "description": "Attribute description.",
            "example": "Customer name including first and last name.",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Attribute ID.",
            "example": "attr.customers.customer_name",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "labels": {
            "description": "An array of attribute labels.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeLabel"
            },
            "type": "array"
          },
          "sortColumn": {
            "description": "Attribute sort column.",
            "example": "customer_name",
            "maxLength": 255,
            "type": "string"
          },
          "sortDirection": {
            "description": "Attribute sort direction.",
            "enum": [
              "ASC",
              "DESC"
            ],
            "example": "\"ASC\" | \"DESC\"",
            "type": "string"
          },
          "sourceColumn": {
            "description": "A name of the source column that is the primary label",
            "example": "customer_name",
            "maxLength": 255,
            "type": "string"
          },
          "sourceColumnDataType": {
            "description": "A type of the source column",
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "example": "STRING",
            "maxLength": 255,
            "type": "string"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Customers"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Customers\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Attribute title.",
            "example": "Customer Name",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "id",
          "labels",
          "sourceColumn",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeColorPalette": {
        "description": "Color palette and its properties.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeColumn": {
        "description": "A table column.",
        "properties": {
          "dataType": {
            "description": "Column type",
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "example": "INT",
            "type": "string"
          },
          "isPrimaryKey": {
            "description": "Is column part of primary key?",
            "type": "boolean"
          },
          "name": {
            "description": "Column name",
            "example": "customer_id",
            "maxLength": 255,
            "type": "string"
          },
          "referencedTableColumn": {
            "description": "Referenced table (Foreign key)",
            "example": "customer_id",
            "maxLength": 255,
            "type": "string"
          },
          "referencedTableId": {
            "description": "Referenced table (Foreign key)",
            "example": "customers",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "dataType",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeCspDirective": {
        "properties": {
          "directive": {
            "maxLength": 255,
            "type": "string"
          },
          "sources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "directive",
          "sources"
        ],
        "type": "object"
      },
      "DeclarativeCustomApplicationSetting": {
        "description": "Custom application setting and its value.",
        "properties": {
          "applicationName": {
            "description": "The application id",
            "example": "Modeler",
            "maxLength": 255,
            "type": "string"
          },
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "id": {
            "description": "Custom Application Setting ID.",
            "example": "modeler.demo",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          }
        },
        "required": [
          "applicationName",
          "content",
          "id"
        ],
        "type": "object"
      },
      "DeclarativeDashboardPlugin": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "description": {
            "description": "Dashboard plugin description.",
            "example": "Three dimensional view of data.",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Dashboard plugin object ID.",
            "example": "dashboard-plugin-1",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Revenues"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Revenues\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Dashboard plugin object title.",
            "example": "3D map renderer",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeDataSource": {
        "description": "A data source and its properties.",
        "properties": {
          "cachePath": {
            "description": "Path to schema, where intermediate caches are stored.",
            "example": "[ \"dfs\", \"data\" ]. Example used in Apache Drill.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "decodedParameters": {
            "items": {
              "$ref": "#/components/schemas/Parameter"
            },
            "type": "array"
          },
          "enableCaching": {
            "description": "Enable caching of intermediate results.",
            "example": false,
            "type": "boolean"
          },
          "id": {
            "description": "Data source ID.",
            "example": "pg_local_docker-demo",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "name": {
            "description": "Name of the data source.",
            "example": "postgres demo",
            "maxLength": 255,
            "type": "string"
          },
          "parameters": {
            "items": {
              "$ref": "#/components/schemas/Parameter"
            },
            "type": "array"
          },
          "password": {
            "description": "Password for the data-source user, property is never returned back.",
            "example": "*****",
            "maxLength": 255,
            "type": "string"
          },
          "pdm": {
            "$ref": "#/components/schemas/DeclarativeTables"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeDataSourcePermission"
            },
            "type": "array"
          },
          "schema": {
            "description": "A scheme/database with the data.",
            "example": "demo",
            "maxLength": 255,
            "type": "string"
          },
          "token": {
            "description": "Token as an alternative to username and password.",
            "example": "Bigquery service account JSON. Encode it using base64!",
            "maxLength": 10000,
            "type": "string"
          },
          "type": {
            "description": "Type of database.",
            "enum": [
              "POSTGRESQL",
              "REDSHIFT",
              "VERTICA",
              "SNOWFLAKE",
              "ADS",
              "BIGQUERY",
              "MSSQL",
              "PRESTO",
              "DREMIO",
              "DRILL",
              "GREENPLUM",
              "AZURESQL",
              "SYNAPSESQL",
              "DATABRICKS"
            ],
            "example": "POSTGRESQL",
            "type": "string"
          },
          "url": {
            "description": "An connection string relevant to type of database.",
            "example": "jdbc:postgresql://postgres:5432/gooddata",
            "maxLength": 255,
            "type": "string"
          },
          "username": {
            "description": "User with permission connect the data source/database.",
            "example": "demo",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "schema",
          "type"
        ],
        "type": "object"
      },
      "DeclarativeDataSourcePermission": {
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "name": {
            "description": "Permission name.",
            "enum": [
              "MANAGE",
              "USE"
            ],
            "type": "string"
          }
        },
        "required": [
          "assignee",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeDataSources": {
        "description": "A data source and its properties.",
        "properties": {
          "dataSources": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeDataSource"
            },
            "type": "array"
          }
        },
        "required": [
          "dataSources"
        ],
        "type": "object"
      },
      "DeclarativeDataset": {
        "description": "A dataset defined by its properties.",
        "properties": {
          "attributes": {
            "description": "An array of attributes.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeAttribute"
            },
            "type": "array"
          },
          "dataSourceTableId": {
            "$ref": "#/components/schemas/DataSourceTableIdentifier"
          },
          "description": {
            "description": "A dataset description.",
            "example": "The customers of ours.",
            "maxLength": 10000,
            "type": "string"
          },
          "facts": {
            "description": "An array of facts.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeFact"
            },
            "type": "array"
          },
          "grain": {
            "description": "An array of grain identifiers.",
            "items": {
              "$ref": "#/components/schemas/GrainIdentifier"
            },
            "type": "array"
          },
          "id": {
            "description": "The Dataset ID. This ID is further used to refer to this instance of dataset.",
            "example": "customers",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "references": {
            "description": "An array of references.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeReference"
            },
            "type": "array"
          },
          "sql": {
            "$ref": "#/components/schemas/DeclarativeDatasetSql"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Customers"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Customers\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "A dataset title.",
            "example": "Customers",
            "maxLength": 255,
            "type": "string"
          },
          "workspaceDataFilterColumns": {
            "description": "An array of workspace data filter columns applied on a workspace.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "grain",
          "id",
          "references",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeDatasetSql": {
        "description": "SQL defining this dataset.",
        "example": {
          "dataSourceId": "my-postgres",
          "statement": "SELECT * FROM some_table"
        },
        "properties": {
          "dataSourceId": {
            "description": "Data source ID.",
            "example": "my-postgres",
            "type": "string"
          },
          "statement": {
            "description": "SQL statement.",
            "example": "SELECT * FROM some_table",
            "type": "string"
          }
        },
        "required": [
          "dataSourceId",
          "statement"
        ],
        "type": "object"
      },
      "DeclarativeDateDataset": {
        "description": "A date dataset.",
        "properties": {
          "description": {
            "description": "Date dataset description.",
            "example": "A customer order date",
            "maxLength": 10000,
            "type": "string"
          },
          "granularities": {
            "description": "An array of date granularities. All listed granularities will be available for date dataset.",
            "items": {
              "enum": [
                "MINUTE",
                "HOUR",
                "DAY",
                "WEEK",
                "MONTH",
                "QUARTER",
                "YEAR",
                "MINUTE_OF_HOUR",
                "HOUR_OF_DAY",
                "DAY_OF_WEEK",
                "DAY_OF_MONTH",
                "DAY_OF_YEAR",
                "WEEK_OF_YEAR",
                "MONTH_OF_YEAR",
                "QUARTER_OF_YEAR"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "granularitiesFormatting": {
            "$ref": "#/components/schemas/GranularitiesFormatting"
          },
          "id": {
            "description": "Date dataset ID.",
            "example": "date",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Customer dates"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Customer dates\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Date dataset title.",
            "example": "Date",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "granularities",
          "granularitiesFormatting",
          "id",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeFact": {
        "description": "A dataset fact.",
        "properties": {
          "description": {
            "description": "Fact description.",
            "example": "A number of orders created by the customer - including all orders, even the non-delivered ones.",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Fact ID.",
            "example": "fact.customer_order_count",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "sourceColumn": {
            "description": "A name of the source column in the table.",
            "example": "customer_order_count",
            "maxLength": 255,
            "type": "string"
          },
          "sourceColumnDataType": {
            "description": "A type of the source column",
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "example": "NUMERIC",
            "maxLength": 255,
            "type": "string"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Customers"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Customers\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Fact title.",
            "example": "Customer order count",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "id",
          "sourceColumn",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeFilterContext": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "description": {
            "description": "Filter Context description.",
            "example": "Filter Context for Sales team.",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Filter Context ID.",
            "example": "filter-sales",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Revenues"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Revenues\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Filter Context title.",
            "example": "Filter Context for Sales team",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeLabel": {
        "description": "A attribute label.",
        "properties": {
          "description": {
            "description": "Label description.",
            "example": "Customer name",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Label ID.",
            "example": "label.customer_name",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "sourceColumn": {
            "description": "A name of the source column in the table.",
            "example": "customer_name",
            "maxLength": 255,
            "type": "string"
          },
          "sourceColumnDataType": {
            "description": "A type of the source column",
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "example": "STRING",
            "maxLength": 255,
            "type": "string"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Customers"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Customers\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Label title.",
            "example": "Customer name",
            "maxLength": 255,
            "type": "string"
          },
          "valueType": {
            "description": "Specific type of label",
            "enum": [
              "TEXT",
              "HYPERLINK",
              "GEO",
              "GEO_LONGITUDE",
              "GEO_LATITUDE"
            ],
            "example": "\"TEXT\" | \"HYPERLINK\" | \"GEO\" | \"GEO_LONGITUDE\" | \"GEO_LATITUDE\"",
            "type": "string"
          }
        },
        "required": [
          "id",
          "sourceColumn",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeLdm": {
        "description": "A logical data model (LDM) representation.",
        "properties": {
          "datasets": {
            "description": "An array containing datasets.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeDataset"
            },
            "type": "array"
          },
          "dateInstances": {
            "description": "An array containing date-related datasets.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeDateDataset"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeclarativeMetric": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "description": {
            "description": "Metric description.",
            "example": "Sales for all the data available.",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Metric ID.",
            "example": "total-sales",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Revenues"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Revenues\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Metric title.",
            "example": "Total sales",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeModel": {
        "description": "A data model structured as a set of its attributes.",
        "properties": {
          "ldm": {
            "$ref": "#/components/schemas/DeclarativeLdm"
          }
        },
        "type": "object"
      },
      "DeclarativeOrganization": {
        "description": "Complete definition of an organization in a declarative form.",
        "properties": {
          "dataSources": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeDataSource"
            },
            "type": "array"
          },
          "organization": {
            "$ref": "#/components/schemas/DeclarativeOrganizationInfo"
          },
          "userGroups": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserGroup"
            },
            "type": "array"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUser"
            },
            "type": "array"
          },
          "workspaceDataFilters": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilter"
            },
            "type": "array"
          },
          "workspaces": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspace"
            },
            "type": "array"
          }
        },
        "required": [
          "organization"
        ],
        "type": "object"
      },
      "DeclarativeOrganizationInfo": {
        "description": "Information available about an organization.",
        "properties": {
          "colorPalettes": {
            "description": "A list of color palettes.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeColorPalette"
            },
            "type": "array"
          },
          "cspDirectives": {
            "description": "A list of CSP directives.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeCspDirective"
            },
            "type": "array"
          },
          "earlyAccess": {
            "description": "Early access defined on level Organization",
            "maxLength": 255,
            "type": "string"
          },
          "hostname": {
            "description": "Formal hostname used in deployment.",
            "example": "alpha.com",
            "maxLength": 255,
            "type": "string"
          },
          "id": {
            "description": "Identifier of the organization.",
            "example": "Alpha corporation",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "name": {
            "description": "Formal name of the organization.",
            "example": "Alpha corporation",
            "maxLength": 255,
            "type": "string"
          },
          "oauthClientId": {
            "description": "Identifier of the authentication provider",
            "maxLength": 255,
            "type": "string"
          },
          "oauthClientSecret": {
            "description": "Communication secret of the authentication provider (never returned back).",
            "maxLength": 255,
            "type": "string"
          },
          "oauthIssuerId": {
            "description": "Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.",
            "example": "myOidcProvider",
            "maxLength": 255,
            "type": "string"
          },
          "oauthIssuerLocation": {
            "description": "URI of the authentication provider.",
            "maxLength": 255,
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeOrganizationPermission"
            },
            "type": "array"
          },
          "settings": {
            "description": "A list of organization settings.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeSetting"
            },
            "type": "array"
          },
          "themes": {
            "description": "A list of themes.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeTheme"
            },
            "type": "array"
          }
        },
        "required": [
          "hostname",
          "id",
          "name",
          "permissions"
        ],
        "type": "object"
      },
      "DeclarativeOrganizationPermission": {
        "description": "Definition of an organization permission assigned to a user/user-group.",
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "name": {
            "description": "Permission name.",
            "enum": [
              "MANAGE"
            ],
            "type": "string"
          }
        },
        "required": [
          "assignee",
          "name"
        ],
        "type": "object"
      },
      "DeclarativePdm": {
        "description": "A physical data model (PDM) representation for single data source.",
        "properties": {
          "pdm": {
            "$ref": "#/components/schemas/DeclarativeTables"
          }
        },
        "required": [
          "pdm"
        ],
        "type": "object"
      },
      "DeclarativeReference": {
        "description": "A dataset reference.",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/ReferenceIdentifier"
          },
          "multivalue": {
            "description": "The multi-value flag enables many-to-many cardinality for references.",
            "example": false,
            "type": "boolean"
          },
          "sourceColumnDataTypes": {
            "description": "An array of source column data types for a given reference.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sourceColumns": {
            "description": "An array of source column names for a given reference.",
            "example": [
              "customer_id"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "identifier",
          "multivalue",
          "sourceColumns"
        ],
        "type": "object"
      },
      "DeclarativeSetting": {
        "description": "Setting and its value.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "id": {
            "description": "Setting ID.",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Type of the setting.",
            "enum": [
              "TIMEZONE",
              "ACTIVE_THEME",
              "ACTIVE_COLOR_PALETTE",
              "WHITE_LABELING",
              "LOCALE",
              "FORMAT_LOCALE",
              "MAPBOX_TOKEN"
            ],
            "example": "TIMEZONE",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "DeclarativeSingleWorkspacePermission": {
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "name": {
            "description": "Permission name.",
            "enum": [
              "MANAGE",
              "ANALYZE",
              "EXPORT",
              "EXPORT_TABULAR",
              "EXPORT_PDF",
              "VIEW"
            ],
            "type": "string"
          }
        },
        "required": [
          "assignee",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeTable": {
        "description": "A database table.",
        "properties": {
          "columns": {
            "description": "An array of physical columns",
            "items": {
              "$ref": "#/components/schemas/DeclarativeColumn"
            },
            "type": "array"
          },
          "id": {
            "description": "Table id.",
            "example": "customers",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "namePrefix": {
            "description": "Table or view name prefix used in scan. Will be stripped when generating LDM.",
            "example": "out_gooddata",
            "maxLength": 255,
            "type": "string"
          },
          "path": {
            "description": "Path to table.",
            "example": [
              "table_schema",
              "table_name"
            ],
            "items": {
              "example": "table_name",
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "Table type: TABLE or VIEW.",
            "example": "VIEW",
            "type": "string"
          }
        },
        "required": [
          "columns",
          "id",
          "path",
          "type"
        ],
        "type": "object"
      },
      "DeclarativeTables": {
        "description": "A physical data model (PDM) tables.",
        "properties": {
          "tables": {
            "description": "An array of physical database tables.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeTable"
            },
            "type": "array"
          }
        },
        "required": [
          "tables"
        ],
        "type": "object"
      },
      "DeclarativeTheme": {
        "description": "Theme and its properties.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeUser": {
        "description": "A user and its properties",
        "properties": {
          "authId": {
            "description": "User identification in the authentication manager.",
            "maxLength": 255,
            "type": "string"
          },
          "email": {
            "description": "User email address",
            "example": "user@example.com",
            "maxLength": 255,
            "type": "string"
          },
          "firstname": {
            "description": "User first name",
            "example": "John",
            "maxLength": 255,
            "type": "string"
          },
          "id": {
            "description": "User identifier.",
            "example": "employee123",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "lastname": {
            "description": "User last name",
            "example": "Wick",
            "maxLength": 255,
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserPermission"
            },
            "type": "array"
          },
          "settings": {
            "description": "A list of user settings.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeSetting"
            },
            "type": "array"
          },
          "userGroups": {
            "items": {
              "$ref": "#/components/schemas/UserGroupIdentifier"
            },
            "type": "array"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "DeclarativeUserGroup": {
        "description": "A user-group and its properties",
        "properties": {
          "id": {
            "description": "UserGroup identifier.",
            "example": "employees.all",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "name": {
            "description": "Name of UserGroup",
            "example": "admins",
            "maxLength": 255,
            "type": "string"
          },
          "parents": {
            "items": {
              "$ref": "#/components/schemas/UserGroupIdentifier"
            },
            "type": "array"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserGroupPermission"
            },
            "type": "array"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "DeclarativeUserGroupPermission": {
        "description": "Definition of a user-group permission assigned to a user/user-group.",
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "name": {
            "description": "Permission name.",
            "enum": [
              "SEE"
            ],
            "type": "string"
          }
        },
        "required": [
          "assignee",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeUserGroupPermissions": {
        "description": "Definition of permissions associated with a user-group.",
        "properties": {
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserGroupPermission"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeclarativeUserGroups": {
        "description": "Declarative form of userGroups and its properties.",
        "properties": {
          "userGroups": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserGroup"
            },
            "type": "array"
          }
        },
        "required": [
          "userGroups"
        ],
        "type": "object"
      },
      "DeclarativeUserPermission": {
        "description": "Definition of a user permission assigned to a user/user-group.",
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "name": {
            "description": "Permission name.",
            "enum": [
              "SEE"
            ],
            "type": "string"
          }
        },
        "required": [
          "assignee",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeUserPermissions": {
        "description": "Definition of permissions associated with a user.",
        "properties": {
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserPermission"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeclarativeUsers": {
        "description": "Declarative form of users and its properties.",
        "properties": {
          "users": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUser"
            },
            "type": "array"
          }
        },
        "required": [
          "users"
        ],
        "type": "object"
      },
      "DeclarativeUsersUserGroups": {
        "description": "Declarative form of both users and user groups and theirs properties.",
        "properties": {
          "userGroups": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserGroup"
            },
            "type": "array"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUser"
            },
            "type": "array"
          }
        },
        "required": [
          "userGroups",
          "users"
        ],
        "type": "object"
      },
      "DeclarativeVisualizationObject": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "description": {
            "description": "Visualization object description.",
            "example": "Simple number for total goods in current production.",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Visualization object ID.",
            "example": "visualization-1",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Revenues"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Revenues\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Visualization object title.",
            "example": "Count of goods",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeWorkspace": {
        "description": "A declarative form of a particular workspace.",
        "properties": {
          "customApplicationSettings": {
            "description": "A list of workspace custom settings.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeCustomApplicationSetting"
            },
            "type": "array"
          },
          "description": {
            "description": "Description of the workspace",
            "maxLength": 255,
            "type": "string"
          },
          "earlyAccess": {
            "description": "Early access defined on level Workspace",
            "maxLength": 255,
            "type": "string"
          },
          "hierarchyPermissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspaceHierarchyPermission"
            },
            "type": "array"
          },
          "id": {
            "description": "Identifier of a workspace",
            "example": "alpha.sales",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "model": {
            "$ref": "#/components/schemas/DeclarativeWorkspaceModel"
          },
          "name": {
            "description": "Name of a workspace to view.",
            "example": "Alpha Sales",
            "maxLength": 255,
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/WorkspaceIdentifier"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeSingleWorkspacePermission"
            },
            "type": "array"
          },
          "settings": {
            "description": "A list of workspace settings.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeSetting"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeWorkspaceDataFilter": {
        "description": "Workspace Data Filters serving the filtering of what data users can see in workspaces.",
        "properties": {
          "columnName": {
            "description": "Workspace Data Filters column name. Data are filtered using this physical column.",
            "example": "country_id",
            "maxLength": 255,
            "type": "string"
          },
          "description": {
            "description": "Workspace Data Filters description.",
            "example": "ID of country",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Workspace Data Filters ID. This ID is further used to refer to this instance.",
            "example": "country_id",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "title": {
            "description": "Workspace Data Filters title.",
            "example": "Country ID",
            "maxLength": 255,
            "type": "string"
          },
          "workspace": {
            "$ref": "#/components/schemas/WorkspaceIdentifier"
          },
          "workspaceDataFilterSettings": {
            "description": "Filter settings specifying values of filters valid for the workspace.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilterSetting"
            },
            "type": "array"
          }
        },
        "required": [
          "columnName",
          "id",
          "title",
          "workspaceDataFilterSettings"
        ],
        "type": "object"
      },
      "DeclarativeWorkspaceDataFilterSetting": {
        "description": "Workspace Data Filters serving the filtering of what data users can see in workspaces.",
        "properties": {
          "description": {
            "description": "Workspace Data Filters setting description.",
            "example": "ID of country setting",
            "maxLength": 10000,
            "type": "string"
          },
          "filterValues": {
            "description": "Only those rows are returned, where columnName from filter matches those values.",
            "example": [
              "US"
            ],
            "items": {
              "description": "Only those rows are returned, where columnName from filter matches those values.",
              "example": "[\"US\"]",
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Workspace Data Filters ID. This ID is further used to refer to this instance.",
            "example": "country_id_setting",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "title": {
            "description": "Workspace Data Filters setting title.",
            "example": "Country ID setting",
            "maxLength": 255,
            "type": "string"
          },
          "workspace": {
            "$ref": "#/components/schemas/WorkspaceIdentifier"
          }
        },
        "required": [
          "filterValues",
          "id",
          "title",
          "workspace"
        ],
        "type": "object"
      },
      "DeclarativeWorkspaceDataFilters": {
        "description": "Declarative form of data filters.",
        "properties": {
          "workspaceDataFilters": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilter"
            },
            "type": "array"
          }
        },
        "required": [
          "workspaceDataFilters"
        ],
        "type": "object"
      },
      "DeclarativeWorkspaceHierarchyPermission": {
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "name": {
            "description": "Permission name.",
            "enum": [
              "MANAGE",
              "ANALYZE",
              "EXPORT",
              "EXPORT_TABULAR",
              "EXPORT_PDF",
              "VIEW"
            ],
            "type": "string"
          }
        },
        "required": [
          "assignee",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeWorkspaceModel": {
        "description": "A declarative form of a model and analytics for a workspace.",
        "properties": {
          "analytics": {
            "$ref": "#/components/schemas/DeclarativeAnalyticsLayer"
          },
          "ldm": {
            "$ref": "#/components/schemas/DeclarativeLdm"
          }
        },
        "type": "object"
      },
      "DeclarativeWorkspacePermissions": {
        "description": "Definition of permissions associated with a workspace.",
        "properties": {
          "hierarchyPermissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspaceHierarchyPermission"
            },
            "type": "array"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeSingleWorkspacePermission"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeclarativeWorkspaces": {
        "description": "A declarative form of a all workspace layout.",
        "properties": {
          "workspaceDataFilters": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilter"
            },
            "type": "array"
          },
          "workspaces": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspace"
            },
            "type": "array"
          }
        },
        "required": [
          "workspaceDataFilters",
          "workspaces"
        ],
        "type": "object"
      },
      "DependentEntitiesGraph": {
        "properties": {
          "edges": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/EntityIdentifier"
              },
              "type": "array"
            },
            "type": "array",
            "uniqueItems": true
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/DependentEntitiesNode"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "edges",
          "nodes"
        ],
        "type": "object"
      },
      "DependentEntitiesNode": {
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "DependentEntitiesRequest": {
        "properties": {
          "identifiers": {
            "items": {
              "$ref": "#/components/schemas/EntityIdentifier"
            },
            "type": "array"
          }
        },
        "required": [
          "identifiers"
        ],
        "type": "object"
      },
      "DependentEntitiesResponse": {
        "properties": {
          "graph": {
            "$ref": "#/components/schemas/DependentEntitiesGraph"
          }
        },
        "required": [
          "graph"
        ],
        "type": "object"
      },
      "EntitlementsRequest": {
        "properties": {
          "entitlementsName": {
            "items": {
              "enum": [
                "Contract",
                "CustomTheming",
                "PdfExports",
                "ManagedOIDC",
                "UiLocalization",
                "Tier",
                "UserCount",
                "UnlimitedUsers",
                "UnlimitedWorkspaces",
                "WhiteLabeling",
                "WorkspaceCount"
              ],
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "entitlementsName"
        ],
        "type": "object"
      },
      "EntityIdentifier": {
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "GenerateLdmRequest": {
        "description": "A request containing all information needed for generation of logical model.",
        "properties": {
          "dateGranularities": {
            "description": "Option to control date granularities for date datasets. Empty value enables common date granularities (DAY, WEEK, MONTH, QUARTER, YEAR). Default value is `all` which enables all available date granularities, including time granularities (like hours, minutes).",
            "example": "all",
            "type": "string"
          },
          "denormPrefix": {
            "description": "Columns starting with this prefix will be considered as denormalization references. The prefix is then followed by the value of `separator` parameter. Given the denormalization reference prefix is `dr` and separator is `__`, the columns with name like `dr__customer_name` will be considered as denormalization references.",
            "example": "dr",
            "type": "string"
          },
          "factPrefix": {
            "description": "Columns starting with this prefix will be considered as facts. The prefix is then followed by the value of `separator` parameter. Given the fact prefix is `f` and separator is `__`, the columns with name like `f__sold` will be considered as facts.",
            "example": "f",
            "type": "string"
          },
          "generateLongIds": {
            "description": "A flag dictating how the attribute, fact and label ids are generated. By default their ids are derived only from the column name, unless there would be a conflict (e.g. category coming from two different tables). In that case a long id format of `<table>.<column>` is used. If the flag is set to true, then all ids will be generated in the long form.",
            "type": "boolean"
          },
          "grainPrefix": {
            "description": "Columns starting with this prefix will be considered as grains. The prefix is then followed by the value of `separator` parameter. Given the grain prefix is `g` and separator is `__`, the columns with name like `g__name` will be considered as grains.",
            "example": "g",
            "type": "string"
          },
          "grainReferencePrefix": {
            "description": "Columns starting with this prefix will be considered as grain references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `gr` and separator is `__`, the columns with name like `gr__customer_name` will be considered as grain references.",
            "example": "gr",
            "type": "string"
          },
          "pdm": {
            "$ref": "#/components/schemas/PdmLdmRequest"
          },
          "primaryLabelPrefix": {
            "description": "Columns starting with this prefix will be considered as primary labels. The prefix is then followed by the value of `separator` parameter. Given the primary label prefix is `pl` and separator is `__`, the columns with name like `pl__country_id` will be considered as primary labels.",
            "example": "pl",
            "type": "string"
          },
          "referencePrefix": {
            "description": "Columns starting with this prefix will be considered as references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `r` and separator is `__`, the columns with name like `r__customer_name` will be considered as references.",
            "example": "r",
            "type": "string"
          },
          "secondaryLabelPrefix": {
            "description": "Columns starting with this prefix will be considered as secondary labels. The prefix is then followed by the value of `separator` parameter. Given the secondary label prefix is `sl` and separator is `__`, the columns with name like `sl__country_id_country_name` will be considered as secondary labels.",
            "example": "sl",
            "type": "string"
          },
          "separator": {
            "default": "__",
            "description": "A separator between prefixes and the names. Default is \"__\".",
            "example": "__",
            "type": "string"
          },
          "tablePrefix": {
            "deprecated": true,
            "description": "Tables starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.",
            "example": "out_table",
            "type": "string"
          },
          "viewPrefix": {
            "deprecated": true,
            "description": "Views starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.",
            "example": "out_view",
            "type": "string"
          },
          "wdfPrefix": {
            "description": "Column serving as workspace data filter. No labels are auto generated for such columns.",
            "example": "wdf",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GrainIdentifier": {
        "description": "A grain identifier.",
        "properties": {
          "id": {
            "description": "Grain ID.",
            "example": "attr.customers.customer_name",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "A type of the grain.",
            "enum": [
              "attribute",
              "dataset"
            ],
            "example": "ATTRIBUTE",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "GrantedPermission": {
        "description": "Permissions granted to the user group",
        "properties": {
          "level": {
            "description": "Level of permission",
            "example": "VIEW, SHARE, EDIT",
            "type": "string"
          },
          "source": {
            "description": "Source of permission",
            "example": "direct/indirect",
            "type": "string"
          }
        },
        "required": [
          "level",
          "source"
        ],
        "type": "object"
      },
      "GranularitiesFormatting": {
        "description": "A date dataset granularities title formatting rules.",
        "properties": {
          "titleBase": {
            "description": "Title base is used as a token in title pattern. If left empty, it is replaced by date dataset title.",
            "maxLength": 255,
            "type": "string"
          },
          "titlePattern": {
            "description": "This pattern is used to generate the title of attributes and labels that result from the granularities.\nThere are two tokens available: \n* `%titleBase` - represents shared part by all titles, or title of Date Dataset if left empty\n* `%granularityTitle` - represents `DateGranularity` built-in title",
            "example": "%titleBase - %granularityTitle",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "titleBase",
          "titlePattern"
        ],
        "type": "object"
      },
      "HierarchyObjectIdentification": {
        "description": "Represents objects with given ID and type in workspace hierarchy (more than one can exists in different workspaces).",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "analyticalDashboard",
              "attribute",
              "dashboardPlugin",
              "dataset",
              "fact",
              "label",
              "metric",
              "prompt",
              "visualizationObject",
              "filterContext",
              "workspaceDataFilter",
              "workspaceDataFilterSettings"
            ],
            "example": "metric",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "IdentifierDuplications": {
        "description": "Contains information about conflicting IDs in workspace hierarchy",
        "properties": {
          "id": {
            "type": "string"
          },
          "origins": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "analyticalDashboard",
              "attribute",
              "dashboardPlugin",
              "dataset",
              "fact",
              "label",
              "metric",
              "prompt",
              "visualizationObject",
              "filterContext",
              "workspaceDataFilter",
              "workspaceDataFilterSettings"
            ],
            "example": "metric",
            "type": "string"
          }
        },
        "required": [
          "id",
          "origins",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardIn": {
        "description": "JSON:API representation of analyticalDashboard entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "analyticalDashboard"
            ],
            "example": "analyticalDashboard",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiAnalyticalDashboardIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "analyticalDashboard"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardOut": {
        "description": "JSON:API representation of analyticalDashboard entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "accessInfo": {
                "properties": {
                  "private": {
                    "description": "is the entity private to the currently logged-in user",
                    "type": "boolean"
                  }
                },
                "required": [
                  "private"
                ],
                "type": "object"
              },
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              },
              "permissions": {
                "description": "List of valid permissions for a logged-in user.",
                "items": {
                  "enum": [
                    "EDIT",
                    "SHARE",
                    "VIEW"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "analyticalDashboards": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiAnalyticalDashboardToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "dashboardPlugins": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDashboardPluginToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "datasets": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "filterContexts": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiFilterContextToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "labels": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "metrics": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiMetricToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "visualizationObjects": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiVisualizationObjectToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "analyticalDashboard"
            ],
            "example": "analyticalDashboard",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardOutIncludes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiVisualizationObjectOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiFilterContextOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiDashboardPluginOutWithLinks"
          }
        ]
      },
      "JsonApiAnalyticalDashboardOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiAnalyticalDashboardPatch": {
        "description": "JSON:API representation of patching analyticalDashboard entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "analyticalDashboard"
            ],
            "example": "analyticalDashboard",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiAnalyticalDashboardPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiAnalyticalDashboardLinkage"
        },
        "type": "array"
      },
      "JsonApiApiTokenIn": {
        "description": "JSON:API representation of apiToken entity.",
        "properties": {
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "apiToken"
            ],
            "example": "apiToken",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiApiTokenInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiApiTokenIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiApiTokenOut": {
        "description": "JSON:API representation of apiToken entity.",
        "properties": {
          "attributes": {
            "properties": {
              "bearerToken": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "apiToken"
            ],
            "example": "apiToken",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiApiTokenOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiApiTokenOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiApiTokenOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiApiTokenOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiApiTokenOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiApiTokenOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiAttributeLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "attribute"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAttributeOut": {
        "description": "JSON:API representation of attribute entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "granularity": {
                "enum": [
                  "MINUTE",
                  "HOUR",
                  "DAY",
                  "WEEK",
                  "MONTH",
                  "QUARTER",
                  "YEAR",
                  "MINUTE_OF_HOUR",
                  "HOUR_OF_DAY",
                  "DAY_OF_WEEK",
                  "DAY_OF_MONTH",
                  "DAY_OF_YEAR",
                  "WEEK_OF_YEAR",
                  "MONTH_OF_YEAR",
                  "QUARTER_OF_YEAR"
                ],
                "type": "string"
              },
              "sortColumn": {
                "maxLength": 255,
                "type": "string"
              },
              "sortDirection": {
                "enum": [
                  "ASC",
                  "DESC"
                ],
                "type": "string"
              },
              "sourceColumn": {
                "maxLength": 255,
                "type": "string"
              },
              "sourceColumnDataType": {
                "enum": [
                  "INT",
                  "STRING",
                  "DATE",
                  "NUMERIC",
                  "TIMESTAMP",
                  "TIMESTAMP_TZ",
                  "BOOLEAN"
                ],
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "dataset": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDatasetToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "defaultView": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiLabelToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "labels": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "attribute"
            ],
            "example": "attribute",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAttributeOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiAttributeOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiAttributeOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAttributeOutIncludes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
          }
        ]
      },
      "JsonApiAttributeOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiAttributeOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAttributeOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiAttributeOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiAttributeToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiAttributeLinkage"
        },
        "type": "array"
      },
      "JsonApiAttributeToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiAttributeLinkage"
          }
        ]
      },
      "JsonApiColorPaletteIn": {
        "description": "JSON:API representation of colorPalette entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "type": "object"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content",
              "name"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "colorPalette"
            ],
            "example": "colorPalette",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiColorPaletteInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiColorPaletteIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiColorPaletteOut": {
        "description": "JSON:API representation of colorPalette entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "type": "object"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content",
              "name"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "colorPalette"
            ],
            "example": "colorPalette",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiColorPaletteOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiColorPaletteOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiColorPaletteOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiColorPaletteOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiColorPaletteOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiColorPaletteOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiColorPalettePatch": {
        "description": "JSON:API representation of patching colorPalette entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "type": "object"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "colorPalette"
            ],
            "example": "colorPalette",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiColorPalettePatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiColorPalettePatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCookieSecurityConfigurationIn": {
        "description": "JSON:API representation of cookieSecurityConfiguration entity.",
        "properties": {
          "attributes": {
            "properties": {
              "lastRotation": {
                "format": "date-time",
                "type": "string"
              },
              "rotationInterval": {
                "description": "Length of interval between automatic rotations expressed in format of ISO 8601 duration",
                "example": "P30D",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "cookieSecurityConfiguration"
            ],
            "example": "cookieSecurityConfiguration",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCookieSecurityConfigurationInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCookieSecurityConfigurationOut": {
        "description": "JSON:API representation of cookieSecurityConfiguration entity.",
        "properties": {
          "attributes": {
            "properties": {
              "lastRotation": {
                "format": "date-time",
                "type": "string"
              },
              "rotationInterval": {
                "description": "Length of interval between automatic rotations expressed in format of ISO 8601 duration",
                "example": "P30D",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "cookieSecurityConfiguration"
            ],
            "example": "cookieSecurityConfiguration",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCookieSecurityConfigurationOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCookieSecurityConfigurationPatch": {
        "description": "JSON:API representation of patching cookieSecurityConfiguration entity.",
        "properties": {
          "attributes": {
            "properties": {
              "lastRotation": {
                "format": "date-time",
                "type": "string"
              },
              "rotationInterval": {
                "description": "Length of interval between automatic rotations expressed in format of ISO 8601 duration",
                "example": "P30D",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "cookieSecurityConfiguration"
            ],
            "example": "cookieSecurityConfiguration",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCookieSecurityConfigurationPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCspDirectiveIn": {
        "description": "JSON:API representation of cspDirective entity.",
        "properties": {
          "attributes": {
            "properties": {
              "sources": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "sources"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "cspDirective"
            ],
            "example": "cspDirective",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCspDirectiveInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCspDirectiveIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCspDirectiveOut": {
        "description": "JSON:API representation of cspDirective entity.",
        "properties": {
          "attributes": {
            "properties": {
              "sources": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "sources"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "cspDirective"
            ],
            "example": "cspDirective",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCspDirectiveOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCspDirectiveOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCspDirectiveOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiCspDirectiveOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCspDirectiveOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiCspDirectiveOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiCspDirectivePatch": {
        "description": "JSON:API representation of patching cspDirective entity.",
        "properties": {
          "attributes": {
            "properties": {
              "sources": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "cspDirective"
            ],
            "example": "cspDirective",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCspDirectivePatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCspDirectivePatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingIn": {
        "description": "JSON:API representation of customApplicationSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "applicationName": {
                "maxLength": 255,
                "type": "string"
              },
              "content": {
                "type": "object"
              }
            },
            "required": [
              "applicationName",
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "customApplicationSetting"
            ],
            "example": "customApplicationSetting",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCustomApplicationSettingIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingOut": {
        "description": "JSON:API representation of customApplicationSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "applicationName": {
                "maxLength": 255,
                "type": "string"
              },
              "content": {
                "type": "object"
              }
            },
            "required": [
              "applicationName",
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "customApplicationSetting"
            ],
            "example": "customApplicationSetting",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiCustomApplicationSettingPatch": {
        "description": "JSON:API representation of patching customApplicationSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "applicationName": {
                "maxLength": 255,
                "type": "string"
              },
              "content": {
                "type": "object"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "customApplicationSetting"
            ],
            "example": "customApplicationSetting",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCustomApplicationSettingPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginIn": {
        "description": "JSON:API representation of dashboardPlugin entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content.",
                "example": {
                  "url": "<plugin-url>"
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dashboardPlugin"
            ],
            "example": "dashboardPlugin",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDashboardPluginIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "dashboardPlugin"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginOut": {
        "description": "JSON:API representation of dashboardPlugin entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content.",
                "example": {
                  "url": "<plugin-url>"
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dashboardPlugin"
            ],
            "example": "dashboardPlugin",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDashboardPluginOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiDashboardPluginOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiDashboardPluginOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiDashboardPluginPatch": {
        "description": "JSON:API representation of patching dashboardPlugin entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content.",
                "example": {
                  "url": "<plugin-url>"
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dashboardPlugin"
            ],
            "example": "dashboardPlugin",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDashboardPluginPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiDashboardPluginLinkage"
        },
        "type": "array"
      },
      "JsonApiDataSourceIdentifierOut": {
        "description": "JSON:API representation of dataSourceIdentifier entity.",
        "properties": {
          "attributes": {
            "properties": {
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "schema": {
                "maxLength": 255,
                "type": "string"
              },
              "type": {
                "enum": [
                  "POSTGRESQL",
                  "REDSHIFT",
                  "VERTICA",
                  "SNOWFLAKE",
                  "ADS",
                  "BIGQUERY",
                  "MSSQL",
                  "PRESTO",
                  "DREMIO",
                  "DRILL",
                  "GREENPLUM",
                  "AZURESQL",
                  "SYNAPSESQL",
                  "DATABRICKS"
                ],
                "type": "string"
              }
            },
            "required": [
              "name",
              "schema",
              "type"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "permissions": {
                "description": "List of valid permissions for a logged-in user.",
                "items": {
                  "enum": [
                    "MANAGE",
                    "USE"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dataSourceIdentifier"
            ],
            "example": "dataSourceIdentifier",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDataSourceIdentifierOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDataSourceIdentifierOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDataSourceIdentifierOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiDataSourceIdentifierOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDataSourceIdentifierOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiDataSourceIdentifierOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiDataSourceIn": {
        "description": "JSON:API representation of dataSource entity.",
        "properties": {
          "attributes": {
            "properties": {
              "cachePath": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "enableCaching": {
                "description": "Enable caching of intermediate results.",
                "example": false,
                "type": "boolean"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "parameters": {
                "items": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "value"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "password": {
                "maxLength": 255,
                "type": "string"
              },
              "schema": {
                "maxLength": 255,
                "type": "string"
              },
              "token": {
                "maxLength": 10000,
                "type": "string"
              },
              "type": {
                "enum": [
                  "POSTGRESQL",
                  "REDSHIFT",
                  "VERTICA",
                  "SNOWFLAKE",
                  "ADS",
                  "BIGQUERY",
                  "MSSQL",
                  "PRESTO",
                  "DREMIO",
                  "DRILL",
                  "GREENPLUM",
                  "AZURESQL",
                  "SYNAPSESQL",
                  "DATABRICKS"
                ],
                "type": "string"
              },
              "url": {
                "maxLength": 255,
                "type": "string"
              },
              "username": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "name",
              "schema",
              "type"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dataSource"
            ],
            "example": "dataSource",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDataSourceInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDataSourceIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDataSourceOut": {
        "description": "JSON:API representation of dataSource entity.",
        "properties": {
          "attributes": {
            "properties": {
              "cachePath": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "decodedParameters": {
                "items": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "value"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "enableCaching": {
                "description": "Enable caching of intermediate results.",
                "example": false,
                "type": "boolean"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "parameters": {
                "items": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "value"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "schema": {
                "maxLength": 255,
                "type": "string"
              },
              "type": {
                "enum": [
                  "POSTGRESQL",
                  "REDSHIFT",
                  "VERTICA",
                  "SNOWFLAKE",
                  "ADS",
                  "BIGQUERY",
                  "MSSQL",
                  "PRESTO",
                  "DREMIO",
                  "DRILL",
                  "GREENPLUM",
                  "AZURESQL",
                  "SYNAPSESQL",
                  "DATABRICKS"
                ],
                "type": "string"
              },
              "url": {
                "maxLength": 255,
                "type": "string"
              },
              "username": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "name",
              "schema",
              "type"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "permissions": {
                "description": "List of valid permissions for a logged-in user.",
                "items": {
                  "enum": [
                    "MANAGE",
                    "USE"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dataSource"
            ],
            "example": "dataSource",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDataSourceOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDataSourceOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDataSourceOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiDataSourceOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDataSourceOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiDataSourceOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiDataSourcePatch": {
        "description": "JSON:API representation of patching dataSource entity.",
        "properties": {
          "attributes": {
            "properties": {
              "cachePath": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "enableCaching": {
                "description": "Enable caching of intermediate results.",
                "example": false,
                "type": "boolean"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "parameters": {
                "items": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "value"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "password": {
                "maxLength": 255,
                "type": "string"
              },
              "schema": {
                "maxLength": 255,
                "type": "string"
              },
              "token": {
                "maxLength": 10000,
                "type": "string"
              },
              "type": {
                "enum": [
                  "POSTGRESQL",
                  "REDSHIFT",
                  "VERTICA",
                  "SNOWFLAKE",
                  "ADS",
                  "BIGQUERY",
                  "MSSQL",
                  "PRESTO",
                  "DREMIO",
                  "DRILL",
                  "GREENPLUM",
                  "AZURESQL",
                  "SYNAPSESQL",
                  "DATABRICKS"
                ],
                "type": "string"
              },
              "url": {
                "maxLength": 255,
                "type": "string"
              },
              "username": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dataSource"
            ],
            "example": "dataSource",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDataSourcePatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDataSourcePatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDataSourceTableOut": {
        "description": "Tables in data source",
        "properties": {
          "attributes": {
            "properties": {
              "columns": {
                "items": {
                  "description": "Table columns in data source",
                  "properties": {
                    "dataType": {
                      "enum": [
                        "INT",
                        "STRING",
                        "DATE",
                        "NUMERIC",
                        "TIMESTAMP",
                        "TIMESTAMP_TZ",
                        "BOOLEAN"
                      ],
                      "type": "string"
                    },
                    "isPrimaryKey": {
                      "type": "boolean"
                    },
                    "name": {
                      "maxLength": 255,
                      "type": "string"
                    },
                    "referencedTableColumn": {
                      "maxLength": 255,
                      "type": "string"
                    },
                    "referencedTableId": {
                      "maxLength": 255,
                      "type": "string"
                    }
                  },
                  "required": [
                    "dataType",
                    "name"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "namePrefix": {
                "maxLength": 255,
                "type": "string"
              },
              "path": {
                "description": "Path to table.",
                "example": [
                  "table_schema",
                  "table_name"
                ],
                "items": {
                  "example": "table_name",
                  "type": "string"
                },
                "type": "array"
              },
              "type": {
                "enum": [
                  "TABLE",
                  "VIEW"
                ],
                "type": "string"
              }
            },
            "required": [
              "columns"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dataSourceTable"
            ],
            "example": "dataSourceTable",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDataSourceTableOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDataSourceTableOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDataSourceTableOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiDataSourceTableOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDataSourceTableOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiDataSourceTableOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiDatasetLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "dataset"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDatasetOut": {
        "description": "JSON:API representation of dataset entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "dataSourceTableId": {
                "maxLength": 255,
                "type": "string"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "grain": {
                "items": {
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "enum": [
                        "attribute",
                        "dataset"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "referenceProperties": {
                "items": {
                  "properties": {
                    "identifier": {
                      "$ref": "#/components/schemas/DatasetReferenceIdentifier"
                    },
                    "multivalue": {
                      "type": "boolean"
                    },
                    "sourceColumnDataTypes": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "sourceColumns": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "identifier",
                    "multivalue",
                    "sourceColumns"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "sql": {
                "properties": {
                  "dataSourceId": {
                    "type": "string"
                  },
                  "statement": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              },
              "type": {
                "enum": [
                  "NORMAL",
                  "DATE"
                ],
                "type": "string"
              },
              "workspaceDataFilterColumns": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "attributes": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "facts": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiFactToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "references": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dataset"
            ],
            "example": "dataset",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDatasetOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDatasetOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiDatasetOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDatasetOutIncludes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
          }
        ]
      },
      "JsonApiDatasetOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiDatasetOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDatasetOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiDatasetOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiDatasetToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiDatasetLinkage"
        },
        "type": "array"
      },
      "JsonApiDatasetToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiDatasetLinkage"
          }
        ]
      },
      "JsonApiEntitlementOut": {
        "description": "JSON:API representation of entitlement entity.",
        "properties": {
          "attributes": {
            "properties": {
              "expiry": {
                "format": "date",
                "type": "string"
              },
              "value": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "entitlement"
            ],
            "example": "entitlement",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiEntitlementOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiEntitlementOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiEntitlementOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiEntitlementOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiEntitlementOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiEntitlementOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiFactLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "fact"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiFactOut": {
        "description": "JSON:API representation of fact entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "sourceColumn": {
                "maxLength": 255,
                "type": "string"
              },
              "sourceColumnDataType": {
                "enum": [
                  "INT",
                  "STRING",
                  "DATE",
                  "NUMERIC",
                  "TIMESTAMP",
                  "TIMESTAMP_TZ",
                  "BOOLEAN"
                ],
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "dataset": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDatasetToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "fact"
            ],
            "example": "fact",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiFactOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiFactOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiFactOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiFactOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiFactOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiFactToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiFactLinkage"
        },
        "type": "array"
      },
      "JsonApiFilterContextIn": {
        "description": "JSON:API representation of filterContext entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "filterContext"
            ],
            "example": "filterContext",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiFilterContextInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiFilterContextIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiFilterContextLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "filterContext"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiFilterContextOut": {
        "description": "JSON:API representation of filterContext entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "attributes": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "datasets": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "labels": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "filterContext"
            ],
            "example": "filterContext",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiFilterContextOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiFilterContextOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiFilterContextOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiFilterContextOutIncludes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
          }
        ]
      },
      "JsonApiFilterContextOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiFilterContextOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiFilterContextOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiFilterContextOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiFilterContextOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiFilterContextPatch": {
        "description": "JSON:API representation of patching filterContext entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "filterContext"
            ],
            "example": "filterContext",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiFilterContextPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiFilterContextPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiFilterContextToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiFilterContextLinkage"
        },
        "type": "array"
      },
      "JsonApiLabelLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "label"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiLabelOut": {
        "description": "JSON:API representation of label entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "primary": {
                "type": "boolean"
              },
              "sourceColumn": {
                "maxLength": 255,
                "type": "string"
              },
              "sourceColumnDataType": {
                "enum": [
                  "INT",
                  "STRING",
                  "DATE",
                  "NUMERIC",
                  "TIMESTAMP",
                  "TIMESTAMP_TZ",
                  "BOOLEAN"
                ],
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              },
              "valueType": {
                "enum": [
                  "TEXT",
                  "HYPERLINK",
                  "GEO",
                  "GEO_LONGITUDE",
                  "GEO_LATITUDE"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "attribute": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiAttributeToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "label"
            ],
            "example": "label",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiLabelOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiLabelOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiLabelOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiLabelOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiLabelOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiLabelToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiLabelLinkage"
        },
        "type": "array"
      },
      "JsonApiLabelToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiLabelLinkage"
          }
        ]
      },
      "JsonApiMetricIn": {
        "description": "JSON:API representation of metric entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "properties": {
                  "format": {
                    "maxLength": 2048,
                    "type": "string"
                  },
                  "maql": {
                    "maxLength": 10000,
                    "type": "string"
                  }
                },
                "required": [
                  "maql"
                ],
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "metric"
            ],
            "example": "metric",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiMetricInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiMetricIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiMetricLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "metric"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiMetricOut": {
        "description": "JSON:API representation of metric entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "properties": {
                  "format": {
                    "maxLength": 2048,
                    "type": "string"
                  },
                  "maql": {
                    "maxLength": 10000,
                    "type": "string"
                  }
                },
                "required": [
                  "maql"
                ],
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "attributes": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "datasets": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "facts": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiFactToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "labels": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "metrics": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiMetricToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "metric"
            ],
            "example": "metric",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiMetricOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiMetricOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiMetricOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiMetricOutIncludes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
          }
        ]
      },
      "JsonApiMetricOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiMetricOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiMetricOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiMetricOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiMetricPatch": {
        "description": "JSON:API representation of patching metric entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "properties": {
                  "format": {
                    "maxLength": 2048,
                    "type": "string"
                  },
                  "maql": {
                    "maxLength": 10000,
                    "type": "string"
                  }
                },
                "required": [
                  "maql"
                ],
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "metric"
            ],
            "example": "metric",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiMetricPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiMetricPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiMetricToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiMetricLinkage"
        },
        "type": "array"
      },
      "JsonApiOrganizationIn": {
        "description": "JSON:API representation of organization entity.",
        "properties": {
          "attributes": {
            "properties": {
              "allowedOrigins": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "earlyAccess": {
                "maxLength": 255,
                "type": "string"
              },
              "hostname": {
                "maxLength": 255,
                "type": "string"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthClientId": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthClientSecret": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthIssuerId": {
                "description": "Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.",
                "example": "myOidcProvider",
                "maxLength": 255,
                "type": "string"
              },
              "oauthIssuerLocation": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "organization"
            ],
            "example": "organization",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiOrganizationInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiOrganizationIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiOrganizationOut": {
        "description": "JSON:API representation of organization entity.",
        "properties": {
          "attributes": {
            "properties": {
              "allowedOrigins": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "earlyAccess": {
                "maxLength": 255,
                "type": "string"
              },
              "hostname": {
                "maxLength": 255,
                "type": "string"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthClientId": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthIssuerId": {
                "description": "Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.",
                "example": "myOidcProvider",
                "maxLength": 255,
                "type": "string"
              },
              "oauthIssuerLocation": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "permissions": {
                "description": "List of valid permissions for a logged-in user.",
                "items": {
                  "enum": [
                    "MANAGE"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "bootstrapUser": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "bootstrapUserGroup": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "organization"
            ],
            "example": "organization",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiOrganizationOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiOrganizationOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiOrganizationOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiOrganizationOutIncludes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
          }
        ]
      },
      "JsonApiOrganizationPatch": {
        "description": "JSON:API representation of patching organization entity.",
        "properties": {
          "attributes": {
            "properties": {
              "allowedOrigins": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "earlyAccess": {
                "maxLength": 255,
                "type": "string"
              },
              "hostname": {
                "maxLength": 255,
                "type": "string"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthClientId": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthClientSecret": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthIssuerId": {
                "description": "Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.",
                "example": "myOidcProvider",
                "maxLength": 255,
                "type": "string"
              },
              "oauthIssuerLocation": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "organization"
            ],
            "example": "organization",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiOrganizationPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiOrganizationPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiOrganizationSettingIn": {
        "description": "JSON:API representation of organizationSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "organizationSetting"
            ],
            "example": "organizationSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiOrganizationSettingInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiOrganizationSettingIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiOrganizationSettingOut": {
        "description": "JSON:API representation of organizationSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "organizationSetting"
            ],
            "example": "organizationSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiOrganizationSettingOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiOrganizationSettingOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiOrganizationSettingOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiOrganizationSettingOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiOrganizationSettingOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiOrganizationSettingOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiOrganizationSettingPatch": {
        "description": "JSON:API representation of patching organizationSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "organizationSetting"
            ],
            "example": "organizationSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiOrganizationSettingPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiOrganizationSettingPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiThemeIn": {
        "description": "JSON:API representation of theme entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "type": "object"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content",
              "name"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "theme"
            ],
            "example": "theme",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiThemeInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiThemeIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiThemeOut": {
        "description": "JSON:API representation of theme entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "type": "object"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content",
              "name"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "theme"
            ],
            "example": "theme",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiThemeOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiThemeOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiThemeOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiThemeOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiThemeOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiThemeOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiThemePatch": {
        "description": "JSON:API representation of patching theme entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "type": "object"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "theme"
            ],
            "example": "theme",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiThemePatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiThemePatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserGroupIn": {
        "description": "JSON:API representation of userGroup entity.",
        "properties": {
          "attributes": {
            "properties": {
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "parents": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "userGroup"
            ],
            "example": "userGroup",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserGroupInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserGroupIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserGroupLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "userGroup"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserGroupOut": {
        "description": "JSON:API representation of userGroup entity.",
        "properties": {
          "attributes": {
            "properties": {
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "parents": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "userGroup"
            ],
            "example": "userGroup",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserGroupOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserGroupOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserGroupOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserGroupOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserGroupOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiUserGroupPatch": {
        "description": "JSON:API representation of patching userGroup entity.",
        "properties": {
          "attributes": {
            "properties": {
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "parents": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "userGroup"
            ],
            "example": "userGroup",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserGroupPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserGroupPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserGroupToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiUserGroupLinkage"
        },
        "type": "array"
      },
      "JsonApiUserGroupToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserGroupLinkage"
          }
        ]
      },
      "JsonApiUserIn": {
        "description": "JSON:API representation of user entity.",
        "properties": {
          "attributes": {
            "properties": {
              "authenticationId": {
                "maxLength": 255,
                "type": "string"
              },
              "email": {
                "maxLength": 255,
                "type": "string"
              },
              "firstname": {
                "maxLength": 255,
                "type": "string"
              },
              "lastname": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "userGroups": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "user"
            ],
            "example": "user",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "user"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserOut": {
        "description": "JSON:API representation of user entity.",
        "properties": {
          "attributes": {
            "properties": {
              "authenticationId": {
                "maxLength": 255,
                "type": "string"
              },
              "email": {
                "maxLength": 255,
                "type": "string"
              },
              "firstname": {
                "maxLength": 255,
                "type": "string"
              },
              "lastname": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "userGroups": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "user"
            ],
            "example": "user",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiUserOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiUserPatch": {
        "description": "JSON:API representation of patching user entity.",
        "properties": {
          "attributes": {
            "properties": {
              "authenticationId": {
                "maxLength": 255,
                "type": "string"
              },
              "email": {
                "maxLength": 255,
                "type": "string"
              },
              "firstname": {
                "maxLength": 255,
                "type": "string"
              },
              "lastname": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "userGroups": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "user"
            ],
            "example": "user",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserSettingIn": {
        "description": "JSON:API representation of userSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "userSetting"
            ],
            "example": "userSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserSettingInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserSettingIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserSettingOut": {
        "description": "JSON:API representation of userSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "userSetting"
            ],
            "example": "userSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserSettingOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserSettingOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserSettingOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiUserSettingOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserSettingOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserSettingOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiUserToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserLinkage"
          }
        ]
      },
      "JsonApiVisualizationObjectIn": {
        "description": "JSON:API representation of visualizationObject entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "visualizationObject"
            ],
            "example": "visualizationObject",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiVisualizationObjectIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "visualizationObject"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectOut": {
        "description": "JSON:API representation of visualizationObject entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "attributes": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "datasets": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "facts": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiFactToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "labels": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "metrics": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiMetricToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "visualizationObject"
            ],
            "example": "visualizationObject",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiVisualizationObjectOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiMetricOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiVisualizationObjectOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiMetricOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiVisualizationObjectOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiVisualizationObjectPatch": {
        "description": "JSON:API representation of patching visualizationObject entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "visualizationObject"
            ],
            "example": "visualizationObject",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiVisualizationObjectPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiVisualizationObjectLinkage"
        },
        "type": "array"
      },
      "JsonApiWorkspaceDataFilterIn": {
        "description": "JSON:API representation of workspaceDataFilter entity.",
        "properties": {
          "attributes": {
            "properties": {
              "columnName": {
                "maxLength": 255,
                "type": "string"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "filterSettings": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceDataFilter"
            ],
            "example": "workspaceDataFilter",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "workspaceDataFilter"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterOut": {
        "description": "JSON:API representation of workspaceDataFilter entity.",
        "properties": {
          "attributes": {
            "properties": {
              "columnName": {
                "maxLength": 255,
                "type": "string"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "filterSettings": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceDataFilter"
            ],
            "example": "workspaceDataFilter",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiWorkspaceDataFilterPatch": {
        "description": "JSON:API representation of patching workspaceDataFilter entity.",
        "properties": {
          "attributes": {
            "properties": {
              "columnName": {
                "maxLength": 255,
                "type": "string"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "filterSettings": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceDataFilter"
            ],
            "example": "workspaceDataFilter",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterSettingLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "workspaceDataFilterSetting"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterSettingOut": {
        "description": "JSON:API representation of workspaceDataFilterSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "filterValues": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "workspaceDataFilter": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceDataFilterSetting"
            ],
            "example": "workspaceDataFilterSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterSettingOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterSettingOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterSettingOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiWorkspaceDataFilterSettingToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingLinkage"
        },
        "type": "array"
      },
      "JsonApiWorkspaceDataFilterToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterLinkage"
          }
        ]
      },
      "JsonApiWorkspaceIn": {
        "description": "JSON:API representation of workspace entity.",
        "properties": {
          "attributes": {
            "properties": {
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "earlyAccess": {
                "maxLength": 255,
                "type": "string"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "parent": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspace"
            ],
            "example": "workspace",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "workspace"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceOut": {
        "description": "JSON:API representation of workspace entity.",
        "properties": {
          "attributes": {
            "properties": {
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "earlyAccess": {
                "maxLength": 255,
                "type": "string"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "config": {
                "properties": {
                  "approximateCountAvailable": {
                    "default": false,
                    "description": "is approximate count enabled - based on type of data-source connected to this workspace",
                    "type": "boolean"
                  },
                  "dataSamplingAvailable": {
                    "default": false,
                    "description": "is sampling enabled - based on type of data-source connected to this workspace",
                    "type": "boolean"
                  },
                  "showAllValuesOnDatesAvailable": {
                    "default": false,
                    "description": "is 'show all values' displayed for dates - based on type of data-source connected to this workspace",
                    "type": "boolean"
                  }
                },
                "required": [
                  "approximateCountAvailable",
                  "dataSamplingAvailable",
                  "showAllValuesOnDatesAvailable"
                ],
                "type": "object"
              },
              "permissions": {
                "description": "List of valid permissions for a logged-in user.",
                "items": {
                  "enum": [
                    "MANAGE",
                    "ANALYZE",
                    "EXPORT",
                    "EXPORT_TABULAR",
                    "EXPORT_PDF",
                    "VIEW"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "parent": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspace"
            ],
            "example": "workspace",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiWorkspaceOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiWorkspacePatch": {
        "description": "JSON:API representation of patching workspace entity.",
        "properties": {
          "attributes": {
            "properties": {
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "earlyAccess": {
                "maxLength": 255,
                "type": "string"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "parent": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspace"
            ],
            "example": "workspace",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspacePatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspacePatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingIn": {
        "description": "JSON:API representation of workspaceSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceSetting"
            ],
            "example": "workspaceSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceSettingIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingOut": {
        "description": "JSON:API representation of workspaceSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceSetting"
            ],
            "example": "workspaceSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceSettingOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiWorkspaceSettingOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiWorkspaceSettingPatch": {
        "description": "JSON:API representation of patching workspaceSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^((?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceSetting"
            ],
            "example": "workspaceSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceSettingPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiWorkspaceLinkage"
          }
        ]
      },
      "JsonNode": {
        "description": "Custom setting content in JSON format.",
        "example": {},
        "type": "object"
      },
      "LabelIdentifier": {
        "description": "A label identifier.",
        "properties": {
          "id": {
            "description": "Label ID.",
            "example": "label_id",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "A type of the label.",
            "enum": [
              "label"
            ],
            "example": "label",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "ListLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectLinks"
          },
          {
            "properties": {
              "next": {
                "description": "A string containing the link's URL for the next page of data.",
                "format": "uri",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "ObjectLinks": {
        "properties": {
          "self": {
            "description": "A string containing the link's URL.",
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "self"
        ],
        "type": "object"
      },
      "ObjectLinksContainer": {
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "type": "object"
      },
      "Parameter": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "PdmLdmRequest": {
        "description": "PDM additions wrapper.",
        "example": {
          "sqls": [
            {
              "columns": [
                {
                  "dataType": "STRING",
                  "name": "ABC"
                }
              ],
              "statement": "select * from abc",
              "title": "My special dataset"
            }
          ]
        },
        "properties": {
          "sqls": {
            "description": "List of SQL datasets.",
            "example": [
              {
                "columns": [
                  {
                    "dataType": "STRING",
                    "name": "ABC"
                  }
                ],
                "statement": "select * from abc",
                "title": "My special dataset"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/PdmSql"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PdmSql": {
        "description": "SQL dataset definition.",
        "example": [
          {
            "columns": [
              {
                "dataType": "STRING",
                "name": "ABC"
              }
            ],
            "statement": "select * from abc",
            "title": "My special dataset"
          }
        ],
        "properties": {
          "columns": {
            "description": "Columns defining SQL dataset.",
            "example": [
              {
                "dataType": "STRING",
                "name": "ABC"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/SqlColumn"
            },
            "type": "array"
          },
          "statement": {
            "description": "SQL statement.",
            "example": "select * from abc",
            "type": "string"
          },
          "title": {
            "description": "SQL dataset title.",
            "example": "My special dataset",
            "type": "string"
          }
        },
        "required": [
          "statement",
          "title"
        ],
        "type": "object"
      },
      "PermissionsForAssignee": {
        "description": "Desired levels of permissions for an assignee.",
        "properties": {
          "assigneeIdentifier": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "permissions": {
            "items": {
              "enum": [
                "EDIT",
                "SHARE",
                "VIEW"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "assigneeIdentifier",
          "permissions"
        ],
        "type": "object"
      },
      "PlatformUsage": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "enum": [
              "UserCount",
              "WorkspaceCount"
            ],
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "PlatformUsageRequest": {
        "properties": {
          "usageItemNames": {
            "items": {
              "enum": [
                "UserCount",
                "WorkspaceCount"
              ],
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "usageItemNames"
        ],
        "type": "object"
      },
      "ReferenceIdentifier": {
        "description": "A reference identifier.",
        "properties": {
          "id": {
            "description": "Reference ID.",
            "example": "customers",
            "pattern": "^(?:(?!\\.)[.A-Za-z0-9_-]{1,255}:)?(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "A type of the reference.",
            "enum": [
              "dataset"
            ],
            "example": "DATASET",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "ResolveSettingsRequest": {
        "description": "A request containing setting IDs to resolve.",
        "properties": {
          "settings": {
            "description": "An array of setting IDs to resolve.",
            "example": [
              "timezone"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "settings"
        ],
        "type": "object"
      },
      "ResolvedSetting": {
        "description": "Setting and its value.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "id": {
            "deprecated": true,
            "description": "Setting ID. Formerly used to identify a type of a particular setting, going to be removed in a favor of setting's type.",
            "type": "string"
          },
          "type": {
            "description": "Type of the setting.",
            "enum": [
              "TIMEZONE",
              "ACTIVE_THEME",
              "ACTIVE_COLOR_PALETTE",
              "WHITE_LABELING",
              "LOCALE",
              "FORMAT_LOCALE",
              "MAPBOX_TOKEN"
            ],
            "example": "TIMEZONE",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "SqlColumn": {
        "description": "Columns defining SQL dataset.",
        "example": [
          {
            "dataType": "STRING",
            "name": "ABC"
          }
        ],
        "properties": {
          "dataType": {
            "description": "Column data type.",
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "example": "STRING",
            "type": "string"
          },
          "name": {
            "description": "Column name.",
            "example": "ABC",
            "type": "string"
          }
        },
        "required": [
          "dataType",
          "name"
        ],
        "type": "object"
      },
      "UserAssignee": {
        "description": "List of users",
        "properties": {
          "email": {
            "description": "User email address",
            "example": "user@example.com",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "User name",
            "example": "John Wick",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "UserGroupAssignee": {
        "description": "List of user groups",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "description": "User group name",
            "example": "admins",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "UserGroupIdentifier": {
        "description": "A user group identifier.",
        "properties": {
          "id": {
            "description": "Identifier of the user group.",
            "example": "group.admins",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "A type.",
            "enum": [
              "userGroup"
            ],
            "example": "userGroup",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "UserGroupPermission": {
        "description": "List of user groups",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "description": "Name of the user group",
            "example": "admins",
            "type": "string"
          },
          "permissions": {
            "description": "Permissions granted to the user group",
            "items": {
              "$ref": "#/components/schemas/GrantedPermission"
            },
            "type": "array"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "UserPermission": {
        "description": "List of users",
        "properties": {
          "email": {
            "description": "User email address",
            "example": "user@example.com",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "Name of user",
            "example": "John Wick",
            "type": "string"
          },
          "permissions": {
            "description": "Permissions granted to the user",
            "items": {
              "$ref": "#/components/schemas/GrantedPermission"
            },
            "type": "array"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "WorkspaceIdentifier": {
        "description": "A workspace identifier.",
        "example": "{ id: demo, type: workspace }",
        "properties": {
          "id": {
            "description": "Identifier of the workspace.",
            "example": "alpha.sales",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "A type.",
            "enum": [
              "workspace"
            ],
            "example": "workspace",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/v1/actions/collectUsage": {
      "get": {
        "description": "Provides information about platform usage, like amount of users, workspaces, ...",
        "operationId": "allPlatformUsage",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PlatformUsage"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Info about the platform usage.",
        "tags": [
          "Usage",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "post": {
        "description": "Provides information about platform usage, like amount of users, workspaces, ...",
        "operationId": "particularPlatformUsage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformUsageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PlatformUsage"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Info about the platform usage for particular items.",
        "tags": [
          "Usage",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/dataSources/{dataSourceId}/generateLogicalModel": {
      "post": {
        "description": "Generate logical data model (LDM) from physical data model (PDM) stored in data source.",
        "operationId": "generateLogicalModel",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateLdmRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeModel"
                }
              }
            },
            "description": "LDM generated successfully."
          }
        },
        "summary": "Generate logical data model (LDM) from physical data model (PDM)",
        "tags": [
          "Generate Logical Data Model",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/dataSources/{dataSourceId}/uploadNotification": {
      "post": {
        "description": "Notification sets up all reports to be computed again with new data.",
        "operationId": "registerUploadNotification",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "An upload notification has been successfully registered."
          }
        },
        "summary": "Register an upload notification",
        "tags": [
          "Invalidate Cache",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/resolveEntitlements": {
      "get": {
        "description": "Resolves values of available entitlements for the organization.",
        "operationId": "resolveAllEntitlements",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiEntitlement"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Values for all public entitlements.",
        "tags": [
          "Entitlement",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "description": "Resolves values for requested entitlements in the organization.",
        "operationId": "resolveRequestedEntitlements",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntitlementsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiEntitlement"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Values for requested public entitlements.",
        "tags": [
          "Entitlement",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/actions/resolveSettings": {
      "get": {
        "description": "Resolves values for all settings without workspace by current user, organization, or default settings.",
        "operationId": "resolveAllSettingsWithoutWorkspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResolvedSetting"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Values for selected settings."
          }
        },
        "summary": "Values for all settings without workspace.",
        "tags": [
          "Reporting - Settings",
          "actions"
        ]
      },
      "post": {
        "description": "Resolves values for selected settings without workspace by current user, organization, or default settings.",
        "operationId": "resolveSettingsWithoutWorkspace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolveSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResolvedSetting"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Values for selected settings."
          }
        },
        "summary": "Values for selected settings without workspace.",
        "tags": [
          "Reporting - Settings",
          "actions"
        ]
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/analyticalDashboards/{dashboardId}/availableAssignees": {
      "get": {
        "operationId": "availableAssignes",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "dashboardId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableAssignees"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "actions"
        ]
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/analyticalDashboards/{dashboardId}/managePermissions": {
      "post": {
        "operationId": "managePermissions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "dashboardId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/PermissionsForAssignee"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "actions"
        ]
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/analyticalDashboards/{dashboardId}/permissions": {
      "get": {
        "operationId": "permissions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "dashboardId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardPermissions"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "actions"
        ]
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/checkEntityOverrides": {
      "post": {
        "description": "Finds entities with given ID in hierarchy (e.g. to check possible future conflicts).",
        "operationId": "checkEntityOverrides",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/HierarchyObjectIdentification"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IdentifierDuplications"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Searching for entities finished successfully."
          }
        },
        "summary": "Finds entities with given ID in hierarchy.",
        "tags": [
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/dependentEntitiesGraph": {
      "get": {
        "description": "Computes the dependent entities graph",
        "operationId": "getDependentEntitiesGraph",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DependentEntitiesResponse"
                }
              }
            },
            "description": "Computes the dependent entities graph"
          }
        },
        "summary": "Computes the dependent entities graph",
        "tags": [
          "Dependency Graph",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to read the graph.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "description": "Computes the dependent entities graph from given entry points",
        "operationId": "getDependentEntitiesGraphFromEntryPoints",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DependentEntitiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DependentEntitiesResponse"
                }
              }
            },
            "description": "Computes the dependent entities graph from given entry points"
          }
        },
        "summary": "Computes the dependent entities graph from given entry points",
        "tags": [
          "Dependency Graph",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to read the graph.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/inheritedEntityConflicts": {
      "get": {
        "description": "Finds API identifier conflicts in given workspace hierarchy.",
        "operationId": "inheritedEntityConflicts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IdentifierDuplications"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Searching for conflicting identifiers finished successfully"
          }
        },
        "summary": "Finds API identifier conflicts in given workspace hierarchy.",
        "tags": [
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/overriddenChildEntities": {
      "get": {
        "description": "Finds API identifier overrides in given workspace hierarchy.",
        "operationId": "overriddenChildEntities",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IdentifierDuplications"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Searching for overridden identifiers finished successfully"
          }
        },
        "summary": "Finds API identifier overrides in given workspace hierarchy.",
        "tags": [
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/resolveSettings": {
      "get": {
        "description": "Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.",
        "operationId": "workspaceResolveAllSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResolvedSetting"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Values for selected settings."
          }
        },
        "summary": "Values for all settings.",
        "tags": [
          "Workspaces - Settings",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "description": "Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.",
        "operationId": "workspaceResolveSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolveSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResolvedSetting"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Values for selected settings."
          }
        },
        "summary": "Values for selected settings.",
        "tags": [
          "Workspaces - Settings",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/entities/admin/cookieSecurityConfigurations/{id}": {
      "get": {
        "operationId": "getEntity@CookieSecurityConfigurations",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=lastRotation==InstantValue;rotationInterval==DurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Cookie Security Configuration",
          "entities",
          "organization-controller"
        ]
      },
      "patch": {
        "operationId": "patchEntity@CookieSecurityConfigurations",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=lastRotation==InstantValue;rotationInterval==DurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Cookie Security Configuration",
          "entities",
          "organization-controller"
        ]
      },
      "put": {
        "operationId": "updateEntity@CookieSecurityConfigurations",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=lastRotation==InstantValue;rotationInterval==DurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Cookie Security Configuration",
          "entities",
          "organization-controller"
        ]
      }
    },
    "/api/v1/entities/admin/organizations/{id}": {
      "get": {
        "operationId": "getEntity@Organizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;hostname==someString;bootstrapUser.id==321;bootstrapUserGroup.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=bootstrapUser,bootstrapUserGroup",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "users",
                  "userGroups",
                  "bootstrapUser",
                  "bootstrapUserGroup",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains permissions required to manipulate the Organization.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@Organizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;hostname==someString;bootstrapUser.id==321;bootstrapUserGroup.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=bootstrapUser,bootstrapUserGroup",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "users",
                  "userGroups",
                  "bootstrapUser",
                  "bootstrapUserGroup",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiOrganizationPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains permissions required to manipulate the Organization.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@Organizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;hostname==someString;bootstrapUser.id==321;bootstrapUserGroup.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=bootstrapUser,bootstrapUserGroup",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "users",
                  "userGroups",
                  "bootstrapUser",
                  "bootstrapUserGroup",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiOrganizationInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains permissions required to manipulate the Organization.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/colorPalettes": {
      "get": {
        "operationId": "getAllEntities@ColorPalettes",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiColorPaletteOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ]
      },
      "post": {
        "operationId": "createEntity@ColorPalettes",
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiColorPaletteInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiColorPaletteOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/colorPalettes/{id}": {
      "delete": {
        "operationId": "deleteEntity@ColorPalettes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@ColorPalettes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiColorPaletteOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ]
      },
      "patch": {
        "operationId": "patchEntity@ColorPalettes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiColorPalettePatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiColorPaletteOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@ColorPalettes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiColorPaletteInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiColorPaletteOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/cspDirectives": {
      "get": {
        "operationId": "getAllEntities@CspDirectives",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=sources==v1,v2,v3",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCspDirectiveOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "CSP Directives",
          "entities",
          "organization-model-controller"
        ]
      },
      "post": {
        "operationId": "createEntity@CspDirectives",
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCspDirectiveInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCspDirectiveOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "CSP Directives",
          "entities",
          "organization-model-controller"
        ]
      }
    },
    "/api/v1/entities/cspDirectives/{id}": {
      "delete": {
        "operationId": "deleteEntity@CspDirectives",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=sources==v1,v2,v3",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "CSP Directives",
          "entities",
          "organization-model-controller"
        ]
      },
      "get": {
        "operationId": "getEntity@CspDirectives",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=sources==v1,v2,v3",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCspDirectiveOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "CSP Directives",
          "entities",
          "organization-model-controller"
        ]
      },
      "patch": {
        "operationId": "patchEntity@CspDirectives",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=sources==v1,v2,v3",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCspDirectivePatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCspDirectiveOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "CSP Directives",
          "entities",
          "organization-model-controller"
        ]
      },
      "put": {
        "operationId": "updateEntity@CspDirectives",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=sources==v1,v2,v3",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCspDirectiveInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCspDirectiveOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "CSP Directives",
          "entities",
          "organization-model-controller"
        ]
      }
    },
    "/api/v1/entities/dataSourceIdentifiers": {
      "get": {
        "operationId": "getAllEntities@DataSourceIdentifiers",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;schema==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceIdentifierOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "USE"
          ]
        }
      }
    },
    "/api/v1/entities/dataSourceIdentifiers/{id}": {
      "get": {
        "operationId": "getEntity@DataSourceIdentifiers",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;schema==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceIdentifierOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "USE"
          ]
        }
      }
    },
    "/api/v1/entities/dataSources": {
      "get": {
        "operationId": "getAllEntities@DataSources",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;type==DatabaseTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@DataSources",
        "parameters": [
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiDataSourceInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/dataSources/{dataSourceId}/dataSourceTables": {
      "get": {
        "operationId": "getAllEntities@DataSourceTables",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=path==v1,v2,v3;type==DataSourceTableTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceTableOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "data-source-entities-controller"
        ]
      }
    },
    "/api/v1/entities/dataSources/{dataSourceId}/dataSourceTables/{id}": {
      "get": {
        "operationId": "getEntity@DataSourceTables",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=path==v1,v2,v3;type==DataSourceTableTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceTableOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "data-source-entities-controller"
        ]
      }
    },
    "/api/v1/entities/dataSources/{id}": {
      "delete": {
        "operationId": "deleteEntity@DataSources",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;type==DatabaseTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@DataSources",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;type==DatabaseTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@DataSources",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;type==DatabaseTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiDataSourcePatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@DataSources",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;type==DatabaseTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiDataSourceInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/entitlements": {
      "get": {
        "operationId": "getAllEntities@Entitlements",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=value==someString;expiry==LocalDateValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiEntitlementOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Entitlement",
          "entities",
          "organization-model-controller"
        ]
      }
    },
    "/api/v1/entities/entitlements/{id}": {
      "get": {
        "operationId": "getEntity@Entitlements",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=value==someString;expiry==LocalDateValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiEntitlementOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Entitlement",
          "entities",
          "organization-model-controller"
        ]
      }
    },
    "/api/v1/entities/organization": {
      "get": {
        "description": "Gets a basic information about organization.",
        "operationId": "getOrganization",
        "parameters": [
          {
            "description": "Return list of permissions available to logged user.",
            "example": "metaInclude=permissions",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "schema": {
              "items": {
                "description": "Available meta objects to include.",
                "enum": [
                  "permissions",
                  "all"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to entity URI."
          }
        },
        "summary": "Get current organization info",
        "tags": [
          "entities",
          "Organization - Entity APIs"
        ]
      }
    },
    "/api/v1/entities/organizationSettings": {
      "get": {
        "operationId": "getAllEntities@OrganizationSettings",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingConfigurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationSettingOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-model-controller"
        ]
      },
      "post": {
        "operationId": "createEntity@OrganizationSettings",
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiOrganizationSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/organizationSettings/{id}": {
      "delete": {
        "operationId": "deleteEntity@OrganizationSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingConfigurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@OrganizationSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingConfigurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-model-controller"
        ]
      },
      "patch": {
        "operationId": "patchEntity@OrganizationSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingConfigurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiOrganizationSettingPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@OrganizationSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingConfigurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiOrganizationSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/themes": {
      "get": {
        "operationId": "getAllEntities@Themes",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiThemeOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ]
      },
      "post": {
        "operationId": "createEntity@Themes",
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiThemeInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiThemeOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/themes/{id}": {
      "delete": {
        "operationId": "deleteEntity@Themes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@Themes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiThemeOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ]
      },
      "patch": {
        "operationId": "patchEntity@Themes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiThemePatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiThemeOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@Themes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiThemeInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiThemeOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/userGroups": {
      "get": {
        "operationId": "getAllEntities@UserGroups",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parents",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "parents",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserGroupOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "UserGroups - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@UserGroups",
        "parameters": [
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parents",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "parents",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserGroupInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserGroupOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "UserGroups - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/userGroups/{id}": {
      "delete": {
        "operationId": "deleteEntity@UserGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "UserGroups - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@UserGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parents",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "parents",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserGroupOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "UserGroups - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@UserGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parents",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "parents",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserGroupPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserGroupOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "UserGroups - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@UserGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parents",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "parents",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserGroupInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserGroupOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "UserGroups - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/users": {
      "get": {
        "operationId": "getAllEntities@Users",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=authenticationId==someString;firstname==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=userGroups",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Users - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@Users",
        "parameters": [
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=userGroups",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Users - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/users/{id}": {
      "delete": {
        "operationId": "deleteEntity@Users",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=authenticationId==someString;firstname==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "Users - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@Users",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=authenticationId==someString;firstname==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=userGroups",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Users - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@Users",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=authenticationId==someString;firstname==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=userGroups",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Users - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@Users",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=authenticationId==someString;firstname==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=userGroups",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Users - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/users/{userId}/apiTokens": {
      "get": {
        "operationId": "getAllEntities@ApiTokens",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=bearerToken==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiApiTokenOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "List all api tokens for a user",
        "tags": [
          "API tokens",
          "entities",
          "user-model-controller"
        ]
      },
      "post": {
        "operationId": "createEntity@ApiTokens",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiApiTokenInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiApiTokenOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "API tokens",
          "entities",
          "user-model-controller"
        ]
      }
    },
    "/api/v1/entities/users/{userId}/apiTokens/{id}": {
      "delete": {
        "operationId": "deleteEntity@ApiTokens",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=bearerToken==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "API tokens",
          "entities",
          "user-model-controller"
        ]
      },
      "get": {
        "operationId": "getEntity@ApiTokens",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=bearerToken==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiApiTokenOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "API tokens",
          "entities",
          "user-model-controller"
        ]
      },
      "put": {
        "operationId": "updateEntity@ApiTokens",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=bearerToken==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiApiTokenInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiApiTokenOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "API tokens",
          "entities",
          "user-model-controller"
        ]
      }
    },
    "/api/v1/entities/users/{userId}/userSettings": {
      "get": {
        "operationId": "getAllEntities@UserSettings",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingConfigurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserSettingOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "List all settings for a user",
        "tags": [
          "User Settings",
          "entities",
          "user-model-controller"
        ]
      },
      "post": {
        "operationId": "createEntity@UserSettings",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "User Settings",
          "entities",
          "user-model-controller"
        ]
      }
    },
    "/api/v1/entities/users/{userId}/userSettings/{id}": {
      "delete": {
        "operationId": "deleteEntity@UserSettings",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingConfigurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "User Settings",
          "entities",
          "user-model-controller"
        ]
      },
      "get": {
        "operationId": "getEntity@UserSettings",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingConfigurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "User Settings",
          "entities",
          "user-model-controller"
        ]
      },
      "put": {
        "operationId": "updateEntity@UserSettings",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingConfigurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "User Settings",
          "entities",
          "user-model-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces": {
      "get": {
        "operationId": "getAllEntities@Workspaces",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;earlyAccess==someString;parent.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parent",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaces",
                  "parent",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=config,permissions,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "config",
                  "permissions",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Workspaces - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@Workspaces",
        "parameters": [
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parent",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaces",
                  "parent",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=config,permissions,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "config",
                  "permissions",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Workspaces - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{id}": {
      "delete": {
        "operationId": "deleteEntity@Workspaces",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;earlyAccess==someString;parent.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "Workspaces - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@Workspaces",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;earlyAccess==someString;parent.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parent",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaces",
                  "parent",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=config,permissions,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "config",
                  "permissions",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Workspaces - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@Workspaces",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;earlyAccess==someString;parent.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parent",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaces",
                  "parent",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspacePatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Workspaces - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@Workspaces",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;earlyAccess==someString;parent.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parent",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaces",
                  "parent",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Workspaces - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards": {
      "get": {
        "operationId": "getAllEntities@AnalyticalDashboards",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "visualizationObjects",
                  "analyticalDashboards",
                  "labels",
                  "metrics",
                  "datasets",
                  "filterContexts",
                  "dashboardPlugins",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,origin,accessInfo,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "origin",
                  "accessInfo",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Dashboards",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@AnalyticalDashboards",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "visualizationObjects",
                  "analyticalDashboards",
                  "labels",
                  "metrics",
                  "datasets",
                  "filterContexts",
                  "dashboardPlugins",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,origin,accessInfo,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "origin",
                  "accessInfo",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiAnalyticalDashboardInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Dashboards",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@AnalyticalDashboards",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "Dashboards",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@AnalyticalDashboards",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "visualizationObjects",
                  "analyticalDashboards",
                  "labels",
                  "metrics",
                  "datasets",
                  "filterContexts",
                  "dashboardPlugins",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,origin,accessInfo,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "origin",
                  "accessInfo",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Dashboards",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@AnalyticalDashboards",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "visualizationObjects",
                  "analyticalDashboards",
                  "labels",
                  "metrics",
                  "datasets",
                  "filterContexts",
                  "dashboardPlugins",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiAnalyticalDashboardPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Dashboards",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@AnalyticalDashboards",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "visualizationObjects",
                  "analyticalDashboards",
                  "labels",
                  "metrics",
                  "datasets",
                  "filterContexts",
                  "dashboardPlugins",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiAnalyticalDashboardInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Dashboards",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/attributes": {
      "get": {
        "operationId": "getAllEntities@Attributes",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;dataset.id==321;defaultView.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=dataset,defaultView,labels",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "datasets",
                  "labels",
                  "dataset",
                  "defaultView",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAttributeOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Attributes",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/attributes/{objectId}": {
      "get": {
        "operationId": "getEntity@Attributes",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;dataset.id==321;defaultView.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=dataset,defaultView,labels",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "datasets",
                  "labels",
                  "dataset",
                  "defaultView",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAttributeOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Attributes",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings": {
      "get": {
        "operationId": "getAllEntities@CustomApplicationSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=applicationName==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@CustomApplicationSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCustomApplicationSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@CustomApplicationSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=applicationName==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      },
      "get": {
        "operationId": "getEntity@CustomApplicationSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=applicationName==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@CustomApplicationSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=applicationName==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCustomApplicationSettingPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      },
      "put": {
        "operationId": "updateEntity@CustomApplicationSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=applicationName==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCustomApplicationSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins": {
      "get": {
        "operationId": "getAllEntities@DashboardPlugins",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDashboardPluginOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Plugins",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@DashboardPlugins",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiDashboardPluginInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDashboardPluginOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Plugins",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@DashboardPlugins",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "Plugins",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@DashboardPlugins",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDashboardPluginOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Plugins",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@DashboardPlugins",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiDashboardPluginPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDashboardPluginOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Plugins",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@DashboardPlugins",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiDashboardPluginInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDashboardPluginOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Plugins",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/datasets": {
      "get": {
        "operationId": "getAllEntities@Datasets",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attributes,facts,references",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "facts",
                  "datasets",
                  "references",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDatasetOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Datasets",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/datasets/{objectId}": {
      "get": {
        "operationId": "getEntity@Datasets",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attributes,facts,references",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "facts",
                  "datasets",
                  "references",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDatasetOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Datasets",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/facts": {
      "get": {
        "operationId": "getAllEntities@Facts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;dataset.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=dataset",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "datasets",
                  "dataset",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiFactOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Facts",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/facts/{objectId}": {
      "get": {
        "operationId": "getEntity@Facts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;dataset.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=dataset",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "datasets",
                  "dataset",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiFactOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Facts",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/filterContexts": {
      "get": {
        "operationId": "getAllEntities@FilterContexts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attributes,datasets,labels",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "datasets",
                  "labels",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiFilterContextOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Context Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@FilterContexts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attributes,datasets,labels",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "datasets",
                  "labels",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiFilterContextInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiFilterContextOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Context Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/filterContexts/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@FilterContexts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "Context Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@FilterContexts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attributes,datasets,labels",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "datasets",
                  "labels",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiFilterContextOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Context Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@FilterContexts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attributes,datasets,labels",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "datasets",
                  "labels",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiFilterContextPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiFilterContextOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Context Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@FilterContexts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attributes,datasets,labels",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "datasets",
                  "labels",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiFilterContextInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiFilterContextOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Context Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/labels": {
      "get": {
        "operationId": "getAllEntities@Labels",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;attribute.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attribute",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "attribute",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiLabelOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Labels",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/labels/{objectId}": {
      "get": {
        "operationId": "getEntity@Labels",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;attribute.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attribute",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "attribute",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiLabelOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Labels",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/metrics": {
      "get": {
        "operationId": "getAllEntities@Metrics",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiMetricOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Metrics",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@Metrics",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiMetricInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiMetricOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Metrics",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/metrics/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@Metrics",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "Metrics",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@Metrics",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiMetricOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Metrics",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@Metrics",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiMetricPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiMetricOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Metrics",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@Metrics",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiMetricInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiMetricOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Metrics",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/visualizationObjects": {
      "get": {
        "operationId": "getAllEntities@VisualizationObjects",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiVisualizationObjectOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Visualization Objects",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@VisualizationObjects",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiVisualizationObjectInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiVisualizationObjectOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Visualization Objects",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@VisualizationObjects",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "Visualization Objects",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@VisualizationObjects",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiVisualizationObjectOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Visualization Objects",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@VisualizationObjects",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiVisualizationObjectPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiVisualizationObjectOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Visualization Objects",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@VisualizationObjects",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiVisualizationObjectInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiVisualizationObjectOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Visualization Objects",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilterSettings": {
      "get": {
        "operationId": "getAllEntities@WorkspaceDataFilterSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;workspaceDataFilter.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=workspaceDataFilter",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilters",
                  "workspaceDataFilter",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilterSettings/{objectId}": {
      "get": {
        "operationId": "getEntity@WorkspaceDataFilterSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;workspaceDataFilter.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=workspaceDataFilter",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilters",
                  "workspaceDataFilter",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters": {
      "get": {
        "operationId": "getAllEntities@WorkspaceDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=filterSettings",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilterSettings",
                  "filterSettings",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@WorkspaceDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=filterSettings",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilterSettings",
                  "filterSettings",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@WorkspaceDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@WorkspaceDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=filterSettings",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilterSettings",
                  "filterSettings",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@WorkspaceDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=filterSettings",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilterSettings",
                  "filterSettings",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@WorkspaceDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=filterSettings",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilterSettings",
                  "filterSettings",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/workspaceSettings": {
      "get": {
        "operationId": "getAllEntities@WorkspaceSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingConfigurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@WorkspaceSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/workspaceSettings/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@WorkspaceSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingConfigurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      },
      "get": {
        "operationId": "getEntity@WorkspaceSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingConfigurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@WorkspaceSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingConfigurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceSettingPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      },
      "put": {
        "operationId": "updateEntity@WorkspaceSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingConfigurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/layout/dataSources": {
      "get": {
        "description": "Retrieve all data sources including related physical model.",
        "operationId": "getDataSourcesLayout",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeDataSources"
                }
              }
            },
            "description": "Retrieved all data sources."
          }
        },
        "summary": "Get all data sources",
        "tags": [
          "layout",
          "Data Source - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to get data sources layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Set all data sources including related physical model.",
        "operationId": "putDataSourcesLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeDataSources"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Defined all data sources."
          }
        },
        "summary": "Put all data sources",
        "tags": [
          "layout",
          "Data Source - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to set data sources layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/dataSources/{dataSourceId}/physicalModel": {
      "get": {
        "description": "Retrieve complete layout of tables with their columns",
        "operationId": "getPdmLayout",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativePdm"
                }
              }
            },
            "description": "Retrieved data source physical mode layout."
          }
        },
        "summary": "Get data source physical model layout",
        "tags": [
          "layout",
          "PDM - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "USE"
          ]
        }
      },
      "put": {
        "description": "Sets complete layout of tables with their columns under corresponding Data Source.",
        "operationId": "setPdmLayout",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativePdm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Data source physical mode layout set successfully."
          }
        },
        "summary": "Set data source physical model layout",
        "tags": [
          "layout",
          "PDM - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/organization": {
      "get": {
        "description": "Retrieve complete layout of organization, workspaces, user-groups, etc.",
        "operationId": "getOrganizationLayout",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeOrganization"
                }
              }
            },
            "description": "Retrieved all parts of an organization."
          }
        },
        "summary": "Get organization layout",
        "tags": [
          "layout",
          "Organization - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to get organization layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Sets complete layout of organization, like workspaces, user-groups, etc.",
        "operationId": "setOrganizationLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeOrganization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Defined all parts of an organization."
          }
        },
        "summary": "Set organization layout",
        "tags": [
          "layout",
          "Organization - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to set organization layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/userGroups": {
      "get": {
        "description": "Retrieve all user-groups eventually with parent group.",
        "operationId": "getUserGroupsLayout",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeUserGroups"
                }
              }
            },
            "description": "Retrieved all user groups."
          }
        },
        "summary": "Get all user groups",
        "tags": [
          "layout",
          "UserGroups - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to get groups layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Define all user groups with their parents eventually.",
        "operationId": "putUserGroupsLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeUserGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Defined all user groups."
          }
        },
        "summary": "Put all user groups",
        "tags": [
          "layout",
          "UserGroups - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to set groups layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/userGroups/{userGroupId}/permissions": {
      "get": {
        "description": "Retrieve current set of permissions of the user-group in a declarative form.",
        "operationId": "getUserGroupPermissions",
        "parameters": [
          {
            "in": "path",
            "name": "userGroupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeUserGroupPermissions"
                }
              }
            },
            "description": "Retrieved current set of permissions."
          }
        },
        "summary": "Get permissions for the user-group",
        "tags": [
          "layout"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to manipulate permissions.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Set effective permissions for the user-group",
        "operationId": "setUserGroupPermissions",
        "parameters": [
          {
            "in": "path",
            "name": "userGroupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeUserGroupPermissions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "User-group permissions successfully set."
          }
        },
        "summary": "Set permissions for the user-group",
        "tags": [
          "layout"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to manipulate permissions.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/users": {
      "get": {
        "description": "Retrieve all users including authentication properties.",
        "operationId": "getUsersLayout",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeUsers"
                }
              }
            },
            "description": "Retrieved all users."
          }
        },
        "summary": "Get all users",
        "tags": [
          "layout",
          "Users - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to get users layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Set all users and their authentication properties.",
        "operationId": "putUsersLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeUsers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Defined all users."
          }
        },
        "summary": "Put all users",
        "tags": [
          "layout",
          "Users - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to set users layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/users/{userId}/permissions": {
      "get": {
        "description": "Retrieve current set of permissions of the user in a declarative form.",
        "operationId": "getUserPermissions",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeUserPermissions"
                }
              }
            },
            "description": "Retrieved current set of permissions."
          }
        },
        "summary": "Get permissions for the user",
        "tags": [
          "layout"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to manipulate permissions.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Set effective permissions for the user",
        "operationId": "setUserPermissions",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeUserPermissions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "User permissions successfully set."
          }
        },
        "summary": "Set permissions for the user",
        "tags": [
          "layout"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to manipulate permissions.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/usersAndUserGroups": {
      "get": {
        "description": "Retrieve all users and user groups with theirs properties.",
        "operationId": "getUsersUserGroupsLayout",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeUsersUserGroups"
                }
              }
            },
            "description": "Retrieved all users and user groups."
          }
        },
        "summary": "Get all users and user groups",
        "tags": [
          "layout",
          "UserGroups - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to get user/groups layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Define all users and user groups with theirs properties.",
        "operationId": "putUsersUserGroupsLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeUsersUserGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Defined all users and user groups."
          }
        },
        "summary": "Put all users and user groups",
        "tags": [
          "layout",
          "UserGroups - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to set user/groups layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/workspaceDataFilters": {
      "get": {
        "description": "Retrieve all workspaces and related workspace data filters (and their settings / values).",
        "operationId": "getWorkspaceDataFiltersLayout",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilters"
                }
              }
            },
            "description": "Retrieved all workspace data filters."
          }
        },
        "summary": "Get workspace data filters for all workspaces",
        "tags": [
          "layout",
          "Data Filters"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to get data filters layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Sets workspace data filters in all workspaces in entire organization.",
        "operationId": "setWorkspaceDataFiltersLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "All workspace data filters set."
          }
        },
        "summary": "Set all workspace data filters",
        "tags": [
          "layout",
          "Data Filters"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to set data filters layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/workspaces": {
      "get": {
        "description": "Gets complete layout of workspaces, their hierarchy, models.",
        "operationId": "getWorkspacesLayout",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeWorkspaces"
                }
              }
            },
            "description": "Retrieved layout of all workspaces."
          }
        },
        "summary": "Get all workspaces layout",
        "tags": [
          "layout",
          "Workspaces - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to get workspaces layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Sets complete layout of workspaces, their hierarchy, models.",
        "operationId": "setWorkspacesLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeWorkspaces"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "All workspaces layout set."
          }
        },
        "summary": "Set all workspaces layout",
        "tags": [
          "layout",
          "Workspaces - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to set workspaces layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/workspaces/{workspaceId}": {
      "get": {
        "description": "Retrieve current model of the workspace in declarative form.",
        "operationId": "getWorkspaceLayout",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeWorkspaceModel"
                }
              }
            },
            "description": "Retrieved the workspace model."
          }
        },
        "summary": "Get workspace layout",
        "tags": [
          "layout",
          "Workspaces - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to read the layout.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "description": "Set complete layout of workspace, like model, authorization, etc.",
        "operationId": "putWorkspaceLayout",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeWorkspaceModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The model of the workspace was set."
          }
        },
        "summary": "Set workspace layout",
        "tags": [
          "layout",
          "Workspaces - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to modify the layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/workspaces/{workspaceId}/analyticsModel": {
      "get": {
        "description": "Retrieve current analytics model of the workspace.",
        "operationId": "getAnalyticsModel",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeAnalytics"
                }
              }
            },
            "description": "Retrieved current analytics model."
          }
        },
        "summary": "Get analytics model",
        "tags": [
          "layout",
          "Analytics Model"
        ],
        "x-gdc-security-info": {
          "description": "Permissions to read the analytics layout.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "description": "Set effective analytics model of the workspace.",
        "operationId": "setAnalyticsModel",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeAnalytics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Analytics model successfully set."
          }
        },
        "summary": "Set analytics model",
        "tags": [
          "layout",
          "Analytics Model"
        ],
        "x-gdc-security-info": {
          "description": "Permissions to modify the analytics layout.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/layout/workspaces/{workspaceId}/logicalModel": {
      "get": {
        "description": "Retrieve current logical model of the workspace in declarative form.",
        "operationId": "getLogicalModel",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeParents",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeModel"
                }
              }
            },
            "description": "Retrieved current logical model."
          }
        },
        "summary": "Get logical model",
        "tags": [
          "layout",
          "LDM - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to read the logical model.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "description": "Set effective logical model of the workspace.",
        "operationId": "setLogicalModel",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Logical model successfully set."
          }
        },
        "summary": "Set logical model",
        "tags": [
          "layout",
          "LDM - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to alter the logical model.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/workspaces/{workspaceId}/permissions": {
      "get": {
        "description": "Retrieve current set of permissions of the workspace in a declarative form.",
        "operationId": "getWorkspacePermissions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeWorkspacePermissions"
                }
              }
            },
            "description": "Retrieved current set of permissions."
          }
        },
        "summary": "Get permissions for the workspace",
        "tags": [
          "layout",
          "Permissions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to manipulate permissions.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Set effective permissions for the workspace",
        "operationId": "setWorkspacePermissions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeWorkspacePermissions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Workspace permissions successfully set."
          }
        },
        "summary": "Set permissions for the workspace",
        "tags": [
          "layout",
          "Permissions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to manipulate permissions.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/options": {
      "get": {
        "description": "Retrieves links for all options for different configurations.",
        "operationId": "getAllOptions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "All options": {
                    "description": "All options",
                    "value": {
                      "options": {
                        "description": "Options resources",
                        "links": {
                          "availableDrivers": "/api/v1/options/availableDrivers"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Links for all configuration options."
          }
        },
        "summary": "Links for all configuration options",
        "tags": [
          "Options",
          "entities"
        ]
      }
    },
    "/api/v1/options/availableDrivers": {
      "get": {
        "description": "Retrieves a list of all supported data sources along with information about the used drivers.",
        "operationId": "getDataSourceDrivers",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "All available drivers": {
                    "description": "All available drivers",
                    "value": {
                      "POSTGRESQL": "org.postgresql.Driver",
                      "REDSHIFT": "com.amazon.redshift.jdbc42.Driver"
                    }
                  }
                },
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "A list of all available data source drivers."
          }
        },
        "summary": "Get all available data source drivers",
        "tags": [
          "entities",
          "Available Drivers"
        ]
      }
    }
  },
  "servers": [
    {
      "description": "GoodData.CN endpoint",
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "Workspaces - Settings"
    },
    {
      "name": "Workspaces - Declarative APIs"
    },
    {
      "name": "UserGroups - Declarative APIs"
    },
    {
      "name": "Options"
    },
    {
      "description": "| all-in-one declarative interface (set [PUT] & read [GET] over JSON)",
      "name": "layout"
    },
    {
      "name": "Generate Logical Data Model"
    },
    {
      "name": "Users - Declarative APIs"
    },
    {
      "name": "Data Filters"
    },
    {
      "name": "Data Source - Declarative APIs"
    },
    {
      "name": "Reporting - Settings"
    },
    {
      "name": "Invalidate Cache"
    },
    {
      "name": "Dependency Graph"
    },
    {
      "name": "Organization - Entity APIs"
    },
    {
      "name": "Organization - Declarative APIs"
    },
    {
      "name": "Permissions"
    },
    {
      "name": "LDM - Declarative APIs"
    },
    {
      "description": "| interconnected resources representing application state (JSON:API)",
      "name": "entities"
    },
    {
      "name": "Analytics Model"
    },
    {
      "name": "Entitlement"
    },
    {
      "description": "| execution of some form of computation (RPC over JSON)",
      "name": "actions"
    },
    {
      "name": "PDM - Declarative APIs"
    },
    {
      "name": "Usage"
    },
    {
      "name": "Available Drivers"
    }
  ]
}
